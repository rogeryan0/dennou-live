<?xml version="1.0" encoding="shift_jis" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<meta http-equiv="Content-type" content="text/html; charset=shift_jis" />
<title>step_ruby_narray.rd.rdhindex.tmp</title>
<link href="style.css" type="text/css" rel="stylesheet" />
</head>
<body>

<small>[ <a href="http://ruby.gfd-dennou.org/">GFD Dennou Ruby Home</a> | <a href="http://ruby.gfd-dennou.org/products/gphys/">GPhys Home</a> | <a href="./">Tutorial top</a> ]</small>
<p><em>このドキュメントは作成中です. 学習には
<a href="http://ruby.gfd-dennou.org/products/gphys/tutorial/">現行のチュートリアル</a>
を参照ください.</em></p>
<h2><a name="label-0" id="label-0">Ruby, NArray の体験</a></h2><!-- RDLabel: "Ruby, NArray の体験" -->
<p>さて、ここまで行なってきたのは
主に GGraph のメソッドを利用したものばかりです.
描画だけでなく, 演算なども行いたいことがあります.
そのとき GPhys ライブラリを用いると
任意の軸情報を持ったデータを楽に取り扱うことができます.</p>
<p>その前に, GPhys, GGraph (および RubyDCL) の基礎となる
Ruby という言語および NArray という Ruby のライブラリ
を簡単に体験してみましょう.
これらの使い勝手を知っておくと, 
GPhys がより使いやすくなります.</p>
<p>Ruby のより詳しいチュートリアルは
<a href="http://ruby.gfd-dennou.org/tutorial/gokuraku/">Dennou-Rubyチュートリアルページ(基礎編)</a>,
NArray については
<a href="http://narray.rubyforge.org/">Numerical Ruby NArray</a>
などを参考にしてください.</p>
<h3><a name="label-1" id="label-1">Ruby 基礎の基礎</a></h3><!-- RDLabel: "Ruby 基礎の基礎" -->
<p>irb を立ち上げます.</p>
<pre>$ irb</pre>
<p>Ruby の文法を簡単に体験してみましょう.</p>
<pre>a = 1          # 予め型を宣言しなくてもよい
a = "orange"   # 型エラーになったり, 変な結果になったりしない.

a        # irb で中身を見るだけなら代入などの操作は不要

ary = [1,2,3]            # 配列
ary = ["hoge", 2, 3.45]  # 中のデータは同じ種類である必要はない
ary[0]                   # 添字は 0 始まり

1.to_s    # メソッドは後ろに書くことも多い

# ループを回す
ary.each{|a|
  puts a
}</pre>
<p>ドットをつける書き方は, 何個もつなぐことができます.
その場合, 前から順に適用されていきます.</p>
<pre>ary = ["hoge", "hero", "foo"]
ary.reverse.join(" ")   # 配列を逆順にして, 半角スペースを挟んだ文字列に変換</pre>
<p>シェルのパイプがドットになったものと
想像するとわかりやすいかもしれません.</p>
<p>class メソッドを使うとそのデータの型 (クラスと呼びます) が返ります.</p>
<pre>1.class
'hoge'.class
[1,2,3].class</pre>
<h4><a name="label-2" id="label-2">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>サンプルファイル T.nc を読み込んで作った gp のクラスは何か調べてみましょう.</li>
<li>オブジェクトに適用できるメソッド一覧は
    methods メソッドで見られます. (1) で調べた, 
    gp のクラスにはどのようなメソッドがあるか調べてみましょう.</li>
</ol>
<h3><a name="label-3" id="label-3">NArray 基礎の基礎</a></h3><!-- RDLabel: "NArray 基礎の基礎" -->
<p>Ruby に配列 (Array) はあるのですが, 
数値を扱うには不便なことがあります.</p>
<pre>a = [1,2,3]
b = [4,5,6]
a + b   # 配列が連結された結果が返ってしまう</pre>
<p>しかし, 
NArray というクラスを用いると数値計算を
比較的簡単に書くことができます.
さっきの配列を NArray に変換して計算してみましょう.</p>
<pre>a = NArray.to_na(a)
b = NArray.to_na(b)
a + b   # 配列の足し算になる</pre>
<p>最初から作る場合はこうなります.</p>
<pre>a = NArray.int(3).indgen  # [0,1,2]
b = NArray.int(2,3).indgen  # [[0,1,2],[3,4,5]]</pre>
<p>こういうこともできます.</p>
<pre>a = 2 * NArray.int(3).indgen  # [0,2,4]
b = NArray.int(1,3).indgen  # [[0],[1],[2]]
c = b*a</pre>
<h4><a name="label-4" id="label-4">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>NArray を使って, 以下のような九九の表を作ってみましょう.</li>
</ol>
<pre>[ [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 
  [ 2, 4, 6, 8, 10, 12, 14, 16, 18 ], 
  [ 3, 6, 9, 12, 15, 18, 21, 24, 27 ], 
  [ 4, 8, 12, 16, 20, 24, 28, 32, 36 ], 
  [ 5, 10, 15, 20, 25, 30, 35, 40, 45 ], 
  [ 6, 12, 18, 24, 30, 36, 42, 48, 54 ], 
  [ 7, 14, 21, 28, 35, 42, 49, 56, 63 ], 
  [ 8, 16, 24, 32, 40, 48, 56, 64, 72 ], 
  [ 9, 18, 27, 36, 45, 54, 63, 72, 81 ] ]</pre>
<h3><a name="label-5" id="label-5">参考文献</a></h3><!-- RDLabel: "参考文献" -->
<ul>
<li><a href="http://ruby.gfd-dennou.org/tutorial/gokuraku/">Dennou-Rubyチュートリアルページ(基礎編)</a></li>
<li><a href="http://narray.rubyforge.org/">Numerical Ruby NArray</a></li>
</ul>

<hr /> <small> davis Group / GFD Dennou Staff <img src="/library/dcmodel/htmltools/dcstaff_email.png" alt="dcstaff&#64;&#103;&#102;&#100;-dennou.org" align="middle" /> <br /> 

</body>
</html>
