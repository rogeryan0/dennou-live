<?xml version="1.0" encoding="shift_jis" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<meta http-equiv="Content-type" content="text/html; charset=shift_jis" />
<title>GPhys, GGraphチュートリアル (その3)</title>
<link href="style.css" type="text/css" rel="stylesheet" />
</head>
<body>

<small>[ <a href="http://ruby.gfd-dennou.org/">GFD Dennou Ruby Home</a> | <a href="http://ruby.gfd-dennou.org/products/gphys/">GPhys Home</a> | <a href="./">Tutorial top</a> ]</small>
<h1><a name="label-0" id="label-0">GPhys, GGraphチュートリアル (その3)</a></h1><!-- RDLabel: "GPhys, GGraphチュートリアル (その3)" -->
<h2><a name="label-1" id="label-1">可視化の第二歩</a></h2><!-- RDLabel: "可視化の第二歩" -->
<p>引き続き irb を使ってお絵描きします．
いろんな断面やズームアップ，簡単な操作（平均，引き算等）を体験します．
描画のオプションも紹介しますが，まだ見てくれの細部にはこだわらず，所望の絵を素早く描くことを重視します．</p>
<h3><a name="label-2" id="label-2">ディレクトリやファイルの中身を知る</a></h3><!-- RDLabel: "ディレクトリやファイルの中身を知る" -->
<p>改めて irb を立ち上げ ls と入力してみましょう．</p>
<pre>$ irb_ggraph 
<span class=irb_input>ls</span>
Directories:
  'air.2012-01.nc/'
  'hgt.2012-01.nc/'
  'ncep2.Jan.clim.1981-2010.nc/'
=&gt; nil</pre>
<p>NetCDFファイルがディレクトリとして扱われていることがわかります．
そこで，ls 'air.2012-01.nc' や ls_l 'air.2012-01.nc' 
などと入力してみましょう．</p>
<pre><span class=irb_input>ls 'air.2012-01.nc/'</span>
Data:
  'lon'
  'lat'
  'level'
  'time'
  'air'
=&gt; nil
<span class=irb_input>ls_l 'air.2012-01.nc/'</span>
Data:
  lon	[lon=144]	'Longitude'	(degrees_east)
  lat	[lat=73]	'Latitude'	(degrees_north)
  level	[level=17]	'Level'	(millibar)
  time	[time=31]	'Time'	(hours since 1-1-1 00:00:0.0)
  air	[lon=144,lat=73,level=17,time=31]	'mean Daily Air temperature'	(degK)
=&gt; nil
<span class=irb_input>ls_l 'ncep2.Jan.clim.1981-2010.nc/'</span>
Data:
  lon	[lon=144]	'Longitude'	(degrees_east)
  lat	[lat=73]	'Latitude'	(degrees_north)
  level	[level=17]	'Level'	(millibar)
  air	[lon=144,lat=73,level=17]	'Monthly Air Temperature on Pressure Levels'	(degK)
  hgt	[lon=144,lat=73,level=17]	'Monthly Geopotential Heights on Pressure Levels'	(m)
  mslp	[lon=144,lat=73]	'Monthly Mean Sea Level Pressure'	(Pascals)
  uwnd	[lon=144,lat=73,level=17]	'Monthly U-wind on Pressure Levels'	(m/s)
  vwnd	[lon=144,lat=73,level=17]	'Monthly V-wind on Pressure Levels'	(m/s)
=&gt; nil</pre>
<p>これで (ncdump を使わなくてもコンパクトな形で),
例えば air.2012-01.nc 中の変数 air は
lon, lat, level, time という名前の次元をもつ 4次元の変数であることや, 
各次元の長さ (144, 73, 17, 31) がわかります．</p>
<p>ls や ls_l は irb_ggraph で読み込んだ
<a href="irbrc_ggraph.rb">irbrc_ggraph.rb</a> 
に定義されています．他に cd (カレントディレクトリの変更) や pwd (カレントディレクトリの表示)
があります．</p>
<h3><a name="label-3" id="label-3">いろんな断面</a></h3><!-- RDLabel: "いろんな断面" -->
<p>今度は日平均気温を tmp という変数名で開いてみましょう
（変数名は好きにつけられますが，小文字ではじめてください．-- 
大文字で始まるのは「定数」となります）．</p>
<pre><span class=irb_input>tmp = gpopen 'air.2012-01.nc/air'</span>
=&gt; &lt;GPhys grid=&lt;4D grid &lt;axis pos=&lt;'lon' in '//home/username/air.2012-01.nc'  sfloat[144]&gt;&gt;
        &lt;axis pos=&lt;'lat' in '/home/username/air.2012-01.nc'  sfloat[73]&gt;&gt;
        &lt;axis pos=&lt;'level' in '/home/username/air.2012-01.nc'  sfloat[17]&gt;&gt;
        &lt;axis pos=&lt;'time' in '/home/username/air.2012-01.nc'  float[31]&gt;&gt;&gt;
   data=&lt;'air' in '/home/username/air.2012-01.nc'  sint[144, 73, 17, 31]&gt;&gt;</pre>
<p>地図投影の設定をし，下から4番目の「高度」(700 hPaの気圧面)，
前から10番目の時刻(1月10日の日平均値)の断面を表示してみます．</p>
<pre><span class=irb_input>set_fig "itr"=&gt;32          # 正距方位図法</span>
<span class=irb_input>set_map "coast_world"=&gt;true</span>
<span class=irb_input>tone_and_contour tmp[true,true,3,9]</pre></span>
<p>ここでは tmp に [true,true,3,9] をつけています．
この四角括弧は，添字による部分「配列」の指定です．
第1,2引数の true は全選択を表します．
Ruby の配列の添字はゼロから始まりますので，
第3, 4次元の 4, 10 番の要素を指定するのにそれぞれ（1を引いて） 3, 9 と指定するのです．</p>
<p>結果：
<a href="img/ggraph_step_01.png">
<img src="img/ggraph_step_01_s.png" alt="img/ggraph_step_01_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>今度は鉛直断面を書いてみましょう．
気圧座標の表示は対数スケールがよいですので，
投影法は2番（縦軸のみ対数座標）をとります
(参考：<a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node7.html">座標系の種類</a>)．
同じ1月10日の経度140度での断面を表示しましょう．座標値での指定には次の用に
cut を使います．</p>
<pre><span class=irb_input>set_fig "itr"=&gt;2</span>
<span class=irb_input>tone_and_contour tmp[false,9].cut("lon"=&gt;140)</pre></span>
<p>（「ドットでつなげるってどういうこと？」と思われた方，それについては次の章で説明します．）</p>
<p>結果：
<a href="img/ggraph_step_02.png">
<img src="img/ggraph_step_02_s.png" alt="img/ggraph_step_02_s.png" />（クリックでフルサイズ表示）
</a></p>
<h3><a name="label-4" id="label-4">描画オプション (2)</a></h3><!-- RDLabel: "描画オプション (2)" -->
<p>図のカスタマイズですが, 
描画メソッドによっては, set_fig のようなメソッドでなく, 
描画メソッドの引数によって変更することができます.
（もしもなぜそのような切り分けがあるか知りたければ次々節をご覧ください．）</p>
<pre><span class=irb_input>set_fig "itr"=&gt;32          # 再び正距方位図法に</span>
<span class=irb_input>tone tmp, true, "interval"=&gt;5, "max"=&gt;300, "min"=&gt;230, "color_bar"=&gt;true</pre></span>
<p>tone の引数で必須なのは最初の一つ(GPhysオブジェクト)ですが，
オプションでさらに引数を与えることができます．
第2引数(ここでは true)は図の重ねがきに関する指定で，<a href="#label-6">次節</a>で解説します．
とりあえずはおまじないとして true を指定するもんだと思っておいてください．
第3引数からがオプション指定です（後でやりますが，実は "interval"=&gt;5',  
以降はすべてまとめて第3引数なのですが気にしないことにしましょう）．
オプションの interval, max, min は色付けの段階の間隔，最大値，最小値の指定です．
color_bar はこれまで tone のあと別メソッドとして呼んでましたが，上例のようにオプションにもできます．</p>
<p>結果：
<a href="img/ggraph_step_03.png">
<img src="img/ggraph_step_03_s.png" alt="img/ggraph_step_03_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>interval の代わりに nlev でおよそのレベル数を指定することもできます：</p>
<pre><span class=irb_input>tone tmp, true, "nlev"=&gt;20   # レベル数を約20に．間隔はお任せ．</pre></span>
<p>ともかくオプションを指定するときは, 第2引数は省略できないので注意してください.
忘れるとこんなエラーメッセージがでます．</p>
<pre><span class=irb_input>tone tmp, "interval"=&gt;5   # 第2引数を忘れてエラーになる例</span>
 *** MESSAGE (SWDOPN) ***  GRPH1 : STARTED / IWS =  1.                         
ArgumentError: 2nd arg (newframe) must be true or false
        from /usr/lib/ruby/1.8/numru/ggraph.rb:2619:in `tone'
        from (irb):10
        from /usr/bin/irb:12:in `&lt;main&gt;'</pre>
<p>どのようなオプションがあるかについては，
GGraph の リファレンスマニュアル
(<a href="http://ruby.gfd-dennou.org/products/gphys/doc/ggraph.html">英語</a>,
<a href="http://w.livedoor.jp/gphys/d/module%20NumRu%3a%3aGGraph">日本語訳</a>)
を参照してください．</p>
<p>描画オプションは help オプションを使って対話的に調べることもできます．</p>
<pre><span class=irb_input>tone nil, true, "help"=&gt;true</span>
 *** MESSAGE (SWDOPN) ***  GRPH1 : STARTED / IWS =  1.                         
&lt;&lt; Description of options &gt;&gt;
  option name	default value	# description:
  "title"	nil	# Title of the figure(if nil, internally
                        # determined)
  "annotate"	true	# if false, do not put texts on the right
                        # margin even when newframe==true
  "ltone"	true	# Same as udpack parameter ltone
  "auto"	false	# Swith DCL.uetone and DCL.uetonf depending on the
                        # data size
  "tonf"	false	# Use DCL.uetonf instead of DCL.uetone
  ..(後略)..</pre>
<p><div class=likepre>
<a href="ggraph_step_sub1.htm"><em>（toneのオプションの全体をみる）</em></a>
</div></p>
<p>オプションの前には常に2つ引数が必要なことに注意してください．
第一引数は通常は GPhys データですが，help オプションを使う場合ダミーで構いません．
この例では nil (なんでもないという定義済みオブジェクト) を指定しました．
第2引数は常に true または false を与える必要があります．</p>
<p>次に日本付近を拡大表示してみましょう．地図投影法は正距円筒図法に切り替え，
海岸線データは全球をカバーするけど分解能がやや荒い coast_world から，
日本付近を細かくカバーする coast_japan に切り替えて，
経度緯度範囲を絞って表示します．</p>
<pre><span class=irb_input>set_fig "itr"=&gt;10          # 正距円筒図法</span>
<span class=irb_input>set_map "coast_japan"=&gt;true, "coast_world"=&gt;false</span>
<span class=irb_input>tone tmp.cut("lon"=&gt;120..150,"lat"=&gt;20..50)</span>
<span class=irb_input>color_bar</pre></span>
<p><a href="img/ggraph_step_04.png">
<img src="img/ggraph_step_04_s.png" alt="img/ggraph_step_04_s.png" />（クリックでフルサイズ表示）
</a></p>
<h4><a name="label-5" id="label-5">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>'interval' を使ってトーン・コンターの間隔を設定してみましょう. 
    このとき, トーンの間隔とコンターの間隔は異なる値にし,
    かつ重ねがきしてみましょう. </li>
<li>正距円筒図法 ("itr"=&gt;10) を使って1月10日の 500 hPa の気温を,
    経度範囲 90〜270 の範囲(緯度は南極から北極まで)で描いてみましょう
    （縦横とも180度の範囲なので正方形の図になるはずです）．</li>
</ol>
<h3><a name="label-6" id="label-6">重ねがき</a></h3><!-- RDLabel: "重ねがき" -->
<p>図は重ねがきすることができます. 次を実行してみてください．</p>
<pre><span class=irb_input>tone tmp[true,true,0,10] - tmp[true,true,0,9], true, "title"=&gt;"T &amp; its tendency"</span>
                 #↑最下層(1000 hPa)での1月11日と10日の差を色で
<span class=irb_input>color_bar                                     # カラーバー</span>
<span class=irb_input>contour tmp[true,true,0,9], false             # 1月10日の1000 hPaの気温をコンターで</pre></span>
<p>GGraph の描画メソッドはオプションで第2引数を与えることができます．
上の例の3行目のように false を与えるとこれまでの描画の上に重ねて絵が書かれます．
その際，座標軸やタイトルは再描画しません．
一方，true (既定値)を与えたり省略した場合はページやフレームを改めて新たに描画します．
図のタイトルは最初の描画時 (tone ...) に書かれるので，もしも図を取っておくのであれば,
後でわかりやすいタイトルをつけるといいでしょう ("T &amp; its tendency" としました)．</p>
<p>結果：
<a href="img/ggraph_step_05.png">
<img src="img/ggraph_step_05_s.png" alt="img/ggraph_step_05_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>中緯度で等温線が波打っているところで気温が大きく増減していることがわかります．</p>
<h4><a name="label-7" id="label-7">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>tone と contour の様々な重ね書きをやってみましょう．</li>
</ol>
<h3><a name="label-8" id="label-8">GGraphの構造とオプション（難：とばして構いません）</a></h3><!-- RDLabel: "GGraphの構造とオプション（難：とばして構いません）" -->
<p>実は 
set_fig で指定するオプションは，fig というメソッドのオプションなのです
（同様に set_map は map のオプション指定，まだ出てませんが
set_axes という axes のオプション指定もあります）．
contour 等は内部で必要に応じて fig を呼ぶのですが，contour 
には fig のオプションは直接は渡せないので前もって set_fig 
で指定するという構造になってます．これらの切り分けは，</p>
<ul>
<li>fig : 図の基本構造を決める</li>
<li>axes : 図の縦軸横軸を司る；</li>
<li>map : 地図投影に関することを司る</li>
</ul>
<p>です．そして</p>
<ul>
<li>contour や tone など個別の描画メソッドのオプションはは，
  それぞれの描画に関わることを決める</li>
</ul>
<p>というようになっています．前述の title などのオプションは 
fig や axes に関わりそうに思えますが，
陽に指定されない場合のタイトルは描画対象の名前からとりますので
個別の描画メソッドのオプションになっています．</p>
<p>ここで一旦 irb のセッションを一区切りしましょう．
いちおう入力内容は保存しましょう（<a href="ggraph_hop.htm">参考</a>）．</p>
<pre><span class=irb_input>history_save</span>
<span class=irb_input>exit</pre></span>
<h3><a name="label-9" id="label-9">ベクトル描画</a></h3><!-- RDLabel: "ベクトル描画" -->
<p>また irb を立ち上げましょう．</p>
<pre>$ irb_ggraph </pre>
<p>今度は1月の気候値 (1981年から2010年までの30年平均値) を読み込みます．</p>
<pre><span class=irb_input>tc = gpopen 'ncep2.Jan.clim.1981-2010.nc/air'    # 気温</span>
<span class=irb_input>zc = gpopen 'ncep2.Jan.clim.1981-2010.nc/hgt'    # 高度</span>
<span class=irb_input>uc = gpopen 'ncep2.Jan.clim.1981-2010.nc/uwnd'   # 東西風</span>
<span class=irb_input>vc = gpopen 'ncep2.Jan.clim.1981-2010.nc/vwnd'   # 南北風</pre></span>
<p>正距円筒図法(番号10)で850 hPaの全球の風速を矢印で表示します．
横長の図になるので，少し "viewport" を広げましょう
（参考：DCLのマニュアルの<a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node9.html">正規変換パラメタ</a>）．</p>
<pre><span class=irb_input>set_fig "itr"=&gt;10, "viewport"=&gt;[0.05, 0.85, 0.3, 0.7]</span>
<span class=irb_input>set_map "coast_world"=&gt;true</span>
<span class=irb_input>p = 850</span>
<span class=irb_input>vector uc.cut("level"=&gt;p), vc.cut("level"=&gt;p), true, "xintv"=&gt;4, "yintv"=&gt;4, "unit"=&gt;true</pre></span>
<p>ここでは共通の気圧面を取るため変数を使いました．p=850 とした上で，u, v 
共通に cut しています．格子点数が多いので，オプションの "xintv", "yintv" で間引き，
オプション "unit" で欄外に矢印の長さスケールを表示することを指定しています．
なお，"unit" は，正式名称 "unit_vect" の略です．
<em> GGraph のオプションは，紛れのない範囲で後ろを省略できます．</em></p>
<p>結果：
<a href="img/ggraph_step_06.png">
<img src="img/ggraph_step_06_s.png" alt="img/ggraph_step_06_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>今度は等圧面高度を色でかいて，その上に先ほどのベクトルを重ねてみましょう．</p>
<pre><span class=irb_input>tone zc.cut("level"=&gt;p)</span>
<span class=irb_input>vector uc.cut("level"=&gt;p), vc.cut("level"=&gt;p), false, "xintv"=&gt;4, "yintv"=&gt;4, "unit"=&gt;true</span>
<span class=irb_input>color_bar "vcent"=&gt;0.5, "vlen"=&gt;0.25</pre></span>
<p>ここでは細かい工夫があります．デフォルトに任せてカラーバーを書くと,
ベクトルスケール表示と重なってしまいますので，
color_bar メソッドのオプションで中心の位置と長さを指定しています
（0〜1でスケールされたビューポートのY軸について）．</p>
<p>結果：
<a href="img/ggraph_step_07.png">
<img src="img/ggraph_step_07_s.png" alt="img/ggraph_step_07_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>矢印はだいたい高度の等値線に沿ってますが（地衡風）が所々大きく向きがずれています．</p>
<h4><a name="label-10" id="label-10">以下やや難</a></h4><!-- RDLabel: "以下やや難" -->
<p>今度は上空の 200 hPa 気圧面で描いてみます．
地図投影はポーラーステレオに変えてみましょう（これでベクトルが表示できるのは GPhys 1.2 以降に限られます）．
この図法では南極が無限遠に投影されます．緯度範囲を限らない（であえてやります）と画面一面に表示されます．そうならないよう，DCL でクリッピングを指定します
（参考：DCLのマニュアルの<a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node22.html">補間とクリッピング</a>）．</p>
<pre><span class=irb_input>p=200</span>
<span class=irb_input>DCL.sgpset("lclip", true)</span>
<span class=irb_input>set_fig "itr"=&gt;31, "viewport"=&gt;[0.12, 0.82, 0.15, 0.85]</span>
<span class=irb_input>tone zc.cut("level"=&gt;p), true, "title"=&gt;"Z &amp; wind"</span>
<span class=irb_input>vector uc.cut("level"=&gt;p), vc.cut("level"=&gt;p), false, "xint"=&gt;3, "yint"=&gt;3, "factor"=&gt;2, "unit"=&gt;true </span>
<span class=irb_input>color_bar "vcent"=&gt;0.5</pre></span>
<p>結果：
<a href="img/ggraph_step_08.png">
<img src="img/ggraph_step_08_s.png" alt="img/ggraph_step_08_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>vector のオプション factor は，お任せできまる矢印の長さを定数倍します（実数）．
お任せでは矢印同士がほぼ重ならないスケールに調整されますが，2倍したので若干重なってます．</p>
<h3><a name="label-11" id="label-11">出力先を変更する</a></h3><!-- RDLabel: "出力先を変更する" -->
<p>さて, 好きな図を描いたところで, 
図をファイルに保存してみましょう.
今の出力先は X になっているので, 
postscript ファイルに出力するように切り替えてみます. </p>
<pre>DCL.grcls  # 今の窓を閉じる</pre>
<p>このままではプロンプトが帰ってこないので, 
図をクリックして消します.</p>
<p>出力先を postscript ファイルに変更して出力します.</p>
<pre>DCL.gropn(2)   # 出力装置番号を 2 番 (postscript ファイル) に変更. ファイルオープンに相当.
tone(gp)       # 出力. この通りでなくてもよい.
DCL.grcls      # 装置を閉じる. ファイルクローズに相当.</pre>
<p>ファイルを見る前に, 最初の状態に戻す練習をしておきましょう.</p>
<pre>DCL.gropn(1)  # X は出力装置 1 番.</pre>
<p>とします. irb を立ち上げた時のように, 白い画面が現れます.</p>
<p>ファイルを確認するために一旦 irb から抜けます.
別の端末を上げても構いません.</p>
<pre>exit</pre>
<p>カレントディレクトリで ls すると dcl.ps というファイルができているはずです.</p>
<pre>$ ls</pre>
<p>どういう絵ができているか確認してみましょう.</p>
<pre>$ gv dcl.ps</pre>
<p>出力先ファイル名 dcl.ps は固定なので, 
間違えて上書きしないように好きな名前に変えておきましょう.</p>
<pre>$ mv dcl.ps practice01.ps</pre>
<h3><a name="label-12" id="label-12">ドキュメントについて</a></h3><!-- RDLabel: "ドキュメントについて" -->
<p>ここでは練習のためにリファレンスマニュアルを参照しましたが, 
比較的単純な場合は
<a href="http://davis.gfd-dennou.org/rubygadgets/ja/?%28Others%29+GPhys%2FGGraph+%A5%C1%A1%BC%A5%C8%A5%B7%A1%BC%A5%C8">GPhys/GGraph チートシート</a>
を参照してもよいでしょう.</p>
<h3><a name="label-13" id="label-13">この章で引用した資料</a></h3><!-- RDLabel: "この章で引用した資料" -->
<ul>
<li>DCL : <a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node7.html">座標系の種類</a></li>
<li>GGraph の リファレンスマニュアル (GPhys のマニュアル内)
  (<a href="http://ruby.gfd-dennou.org/products/gphys/doc/ggraph.html">英語</a>,
  <a href="http://w.livedoor.jp/gphys/d/module%20NumRu%3a%3aGGraph">日本語訳</a>)</li>
</ul>
<h3><a name="label-14" id="label-14">さらなる参考資料</a></h3><!-- RDLabel: "さらなる参考資料" -->
<ul>
<li><a href="http://davis.gfd-dennou.org/rubygadgets/ja/?%28Others%29+GPhys%2FGGraph+%A5%C1%A1%BC%A5%C8%A5%B7%A1%BC%A5%C8">GPhys/GGraph チートシート</a></li>
<li>GPhys リファレンスマニュアル
  (
  <a href="http://ruby.gfd-dennou.org/products/gphys/doc/">英語</a>,
  <a href="http://w.livedoor.jp/gphys/">日本語訳</a>
  )
<ul>
<li>その中の GGraph の リファレンスマニュアル
    (<a href="http://ruby.gfd-dennou.org/products/gphys/doc/ggraph.html">英語</a>,
    <a href="http://w.livedoor.jp/gphys/d/module%20NumRu%3a%3aGGraph">日本語訳</a>)</li>
</ul></li>
<li><a href="http://ruby.gfd-dennou.org/products/ruby-dcl/ruby-dcl-doc/">RubyDCL ドキュメント</a></li>
<li><a href="http://ruby.gfd-dennou.org/products/ruby-dcl/ruby-dcl-doc/rakuraku/node61.html">いろいろな地図投影法</a> (RubyDCL ドキュメント内)</li>
<li><a href="http://www.gfd-dennou.org/library/dcl/dcl-5.4.2/src/env1/colormap/colormap_gallery.html">DCL colormaps</a> (DCL ドキュメント内)</li>
</ul>

<hr /> <small> davis Group / GFD Dennou Staff <img src="/library/dcmodel/htmltools/dcstaff_email.png" alt="dcstaff&#64;&#103;&#102;&#100;-dennou.org" align="middle" /> <br /> 

</body>
</html>
