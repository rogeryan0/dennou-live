<?xml version="1.0" encoding="shift_jis" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<meta http-equiv="Content-type" content="text/html; charset=shift_jis" />
<title>GPhys, GGraphチュートリアル (その2)</title>
<link href="style.css" type="text/css" rel="stylesheet" />
</head>
<body>

<small>[ <a href="http://ruby.gfd-dennou.org/">GFD Dennou Ruby Home</a> | <a href="http://ruby.gfd-dennou.org/products/gphys/">GPhys Home</a> | <a href="./">Tutorial top</a> ]</small>
<h1><a name="label-0" id="label-0">GPhys, GGraphチュートリアル (その2)</a></h1><!-- RDLabel: "GPhys, GGraphチュートリアル (その2)" -->
<h2><a name="label-1" id="label-1">可視化の第一歩</a></h2><!-- RDLabel: "可視化の第一歩" -->
<p>この章は，描画ライブラリである GGraph (GPhysの付属ライブラリ)を使った気象データの可視化のチュートリアルです.
Rubyの対話的インタープリター irb を使って，気象データの絵が簡単に描けることを体験します．</p>
<p>前もって <a href="getting_started.htm">「はじめる前に」</a> の章で紹介した準備をしておいてください．</p>
<p><div class=summary></p>
<h4><a name="label-2" id="label-2">この章の概要</a></h4><!-- RDLabel: "この章の概要" -->
<ul>
<li>最速2行で絵が描けることを体験します（データオープン1行，描画1行）．</li>
<li>いくつかの種類の描画をやってみます（色塗り，コンター，折れ線...）．描画設定の初歩を体験します．</li>
<li>あわせて次のようなことを学びます：エラーメッセージの読み方，ヒストリー機能 (使用するirbスタートアップファイルの機能)．</li>
</ul>
<p></div></p>
<h3><a name="label-3" id="label-3">最速描画</a></h3><!-- RDLabel: "最速描画" -->
<p>端末で irb を GPhys 用のスタートアップファイルを読み込んだ形で立ち上げます（<a href="getting_started.htm">「はじめる前に」</a> 参照; ~/.irbrc の設定をしてる場合は以下で irb_ggraph でなく irb と打ち込む）．</p>
<pre>$ irb_ggraph</pre>
<p>まずは以下をプロンプト（irb(main):001:0&gt;など）に続いて入力してみましょう.
'#' 以降はコメント文なので入力する必要はありません（入力しても問題ありません）.</p>
<pre><span class=irb_input>gp = gpopen 'air.2012-01.nc/air'   # データを読み込み</span>
<span class=irb_input>tone gp                # トーンとして描画</pre></span>
<p>すると，ウィンドーが立ち上がり次の画像が表示されます．</p>
<p><a href="img/ggraph_hop_irb01.png">
<img src="img/ggraph_hop_irb01_s.png" alt="img/ggraph_hop_irb01_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>air.2012-01.nc の中の物理量 air (気温) のデータは
経度，緯度，気圧，時間の 4 次元ですが, GGraph がおまかせで 2 次元断面を取ります．
3次元め以降は最初の要素 (最下層＆最初の時刻) をとり，経度緯度断面を描きます
(他の断面の描き方は<a href="ggraph_step.htm">次の章</a>で紹介します)．
座標軸やタイトルはデータから読み取ってお任せで表示されます．</p>
<p>gp への代入は, 他の内容で上書きしたり irb を終了したりしない限り,
再度行う必要はありません.</p>
<p>ところで，上で gpopen を呼んだ際，次のようにメッセージが画面に表示されたはずです．</p>
<pre><span class=irb_input>gp = gpopen 'air.2012-01.nc/air'   # データを読み込み</span>
=&gt; &lt;GPhys grid=&lt;4D grid &lt;axis pos=&lt;'lon' in '/home/username/air.2012-01.nc'  sfloat[144]&gt;&gt;
        &lt;axis pos=&lt;'lat' in '/home/username/air.2012-01.nc'  sfloat[73]&gt;&gt;
        &lt;axis pos=&lt;'level' in '/home/username/air.2012-01.nc'  sfloat[17]&gt;&gt;
        &lt;axis pos=&lt;'time' in '/home/username/air.2012-01.nc'  float[31]&gt;&gt;&gt;
   data=&lt;'air' in '/home/username/air.2012-01.nc'  sint[144, 73, 17, 31]&gt;&gt;</pre>
<p>第1行目の冒頭に &lt;GPhys とあります．これは，
gp という変数で表されるモノ (object) が，GPhys という「クラス」(「型」と思えばいいです)のモノ 
(object)であることを表します．続く内容からは，それがどのようなデータを代表しているか，ある程度想像できるでしょう．</p>
<h3><a name="label-4" id="label-4">エラーが出たら</a></h3><!-- RDLabel: "エラーが出たら" -->
<p>コマンドを誤って打ってしまったとしましょう.</p>
<pre><span class=irb_input>gp = gpopen "air.2012-01.nc/airrr"  # air と間違えて airrr と打ってしまった ^^;</span>
RuntimeError: variable 'airrr' not found in #&lt;NumRu::NetCDF:0x0000000255a5d0&gt;
      from /usr/lib/ruby/1.8/numru/gphys/gphys_netcdf_io.rb:528:in `__files2varray'
      from /usr/lib/ruby/1.8/numru/gphys/gphys_netcdf_io.rb:317:in `open'
      from /usr/lib/ruby/1.8/numru/gphys/gphys_io.rb:121:in `open'
      from /usr/lib/ruby/1.8/numru/gdir.rb:572:in `data'
      from /usr/lib/ruby/1.8/numru/gdir.rb:566:in `data'
      from /home/username/irbrc_ggraph.rb:53:in `gpopen'
      from (irb):3</pre>
<p>英語でエラーが大量に出力されて読み飛ばしたくなるかもしれませんが,
エラーを修正するためのヒントが得られることも多いのでじっくり読みましょう.
まず見るべきは 1 行目です.
variable 'airrr' not found ですから, 「変数 `airrr' が見つからない」ですね.
2行目からはエラーが発生した箇所から呼び出しもとに遡る「トレースバック」です．
見るべき「大元」はエラーの一番下の行です．上では 
from (irb):3 すなわち，irb の 3 行目の入力となります．
from のあとの数字は行数 (irb の場合はプロンプト右のほうに表示されている番号) です.
今の場合もちろん直前の入力です．ここまで読めば恐らく何が問題であるか思い至るでしょう．
ライブラリのバグが疑われれば一行ずつ上に見て行きますが,
ほとんどの場合は自分が書いた場所 (エラーの下の方) に原因がありますので, 
むやみに上に行かないほうが賢明です.</p>
<h4><a name="label-5" id="label-5">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>右辺を gp = gpopen "airrr.2012-01.nc/air" 
    と変更してエラーを出してみましょう (ファイル名を間違える).
    そしてエラーメッセージを解読してみましょう.</li>
</ol>
<h3><a name="label-6" id="label-6">いろんな種類の図を描いてみる</a></h3><!-- RDLabel: "いろんな種類の図を描いてみる" -->
<p>GGraph には様々な描画メソッドが用意されています.</p>
<h4><a name="label-7" id="label-7">1次元描画</a></h4><!-- RDLabel: "1次元描画" -->
<p>折れ線, マーク</p>
<pre><span class=irb_input>line(gp)</span>
<span class=irb_input>mark(gp)</pre></span>
<p>結果(北極での「経度断面」なので一様でつまらないですが)：</p>
<p><a href="img/ggraph_hop_irb02.png">
<img src="img/ggraph_hop_irb02_s.png" alt="img/ggraph_hop_irb02_s.png" />（クリックでフルサイズ表示）
</a>
<a href="img/ggraph_hop_irb03.png">
<img src="img/ggraph_hop_irb03_s.png" alt="img/ggraph_hop_irb03_s.png" />（クリックでフルサイズ表示）
</a></p>
<h4><a name="label-8" id="label-8">2次元描画</a></h4><!-- RDLabel: "2次元描画" -->
<p>トーン (最初の例と同じだがカラーバーをつける)</p>
<pre><span class=irb_input>tone(gp)</span>
<span class=irb_input>color_bar</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb03.5.png">
<img src="img/ggraph_hop_irb03.5_s.png" alt="img/ggraph_hop_irb03.5_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>コンター</p>
<pre><span class=irb_input>contour(gp)</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb04.png">
<img src="img/ggraph_hop_irb04_s.png" alt="img/ggraph_hop_irb04_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>トーンとコンターの重ね描き</p>
<pre><span class=irb_input>tone_and_contour(gp)</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb05.png">
<img src="img/ggraph_hop_irb05_s.png" alt="img/ggraph_hop_irb05_s.png" />（クリックでフルサイズ表示）
</a></p>
<h4><a name="label-9" id="label-9">その他</a></h4><!-- RDLabel: "その他" -->
<p>散布図 (scatter), 色つき散布図(color_scatter),
ベクトル図 (vector) があります. 
詳しくはリファレンスマニュアル
(
<a href="http://ruby.gfd-dennou.org/products/gphys/doc/">英語</a>,
<a href="http://w.livedoor.jp/gphys/">日本語訳</a>
)
を参照ください.</p>
<h3><a name="label-10" id="label-10">カッコがついたりつかなかったり...</a></h3><!-- RDLabel: "カッコがついたりつかなかったり..." -->
<p>Ruby ではメソッド（＝関数と思っていいです）の引数は丸括弧で括りますが,
紛れがなければ省略できます．例えば次の2つは同じです．</p>
<pre><span class=irb_input>tone(gp)</span>
<span class=irb_input>tone gp</pre></span>
<p>好みでどちらを使ってもよいです．irbで対話的に使う場合，タイプの少ない後者が若干やりやすいように思いますが，後で出てくるようにメソッドをつなげる場合括弧は欠かせません．</p>
<h3><a name="label-11" id="label-11">描画オプション (1)</a></h3><!-- RDLabel: "描画オプション (1)" -->
<p>図の描き方をカスタマイズすることもできます.</p>
<p>座標系, 地図投影を変更してみましょう.</p>
<pre><span class=irb_input>set_fig 'itr'=&gt;10             # 正距円筒図法</span>
<span class=irb_input>set_map 'coast_world'=&gt;true   # 地球の海岸線を表示</span>
<span class=irb_input>tone gp</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb06.png">
<img src="img/ggraph_hop_irb06_s.png" alt="img/ggraph_hop_irb06_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>ちなみに</p>
<pre><span class=irb_input>set_fig 'itr'=&gt;10             # 正距円筒図法</pre></span>
<p>を入力した際の標準出力は, </p>
<pre>=&gt; {'itr'=&gt;1}</pre>
<p>であるはずです.
これはそれまでに設定されていた値です.
元に戻したいときはこの値をメモしておきましょう.</p>
<p>何番がどの座標系に割り当てられているかは
<a href="http://ruby.gfd-dennou.org/products/ruby-dcl/ruby-dcl-doc/rakuraku/node61.html">いろいろな地図投影法</a> (らくらく DCL 内)
や 
<a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node7.html">DCL マニュアルの「座標系の種類」</a>
を参考にしてください.</p>
<p>今度は北極からみてみましょう．</p>
<pre><span class=irb_input>set_fig('itr'=&gt;30)            # 正射図法</span>
<span class=irb_input>tone(gp)</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb07.png">
<img src="img/ggraph_hop_irb07_s.png" alt="img/ggraph_hop_irb07_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>色の塗り方 (カラーマップ) の変更はこうします.</p>
<pre><span class=irb_input>DCL.sgscmn(3)   # 3 番のカラーマップ(黒-青-白のグラデーション)を使用</span>
<span class=irb_input>DCL.gropn(1)    # 新しい描画窓の表示 (DCL 5.4.4以降は不要になるはず)</span>
<span class=irb_input>tone(gp)</pre></span>
<p>結果：
<a href="img/ggraph_hop_irb08.png">
<img src="img/ggraph_hop_irb08_s.png" alt="img/ggraph_hop_irb08_s.png" />（クリックでフルサイズ表示）
</a></p>
<p>DCL. で始まるのは <a href="http://ruby.gfd-dennou.org/products/ruby-dcl/">RubyDCL</a> 
のメソッドです．RubyDCL は
<a href="http://www.gfd-dennou.org/library/dcl/">DCL</a>
を Ruby から呼べるようにしたものです．
GGraph は RubyDCL と協調して使うようにできています．
なお，irb に読み込んであるスタートアップファイル 
<a href="irbrc_ggraph.rb">irbrc_ggraph.rb</a>
にも DCL. で始まるコールがたくさんあることがわかるでしょう．</p>
<p>DCL.sgscmn は RubyDCL のメソッドで，カラーマップを取り替えます.
何番のカラーマップがどういう色の塗り方に対応するかは
<a href="http://www.gfd-dennou.org/library/dcl/dcl-5.4.2/src/env1/colormap/colormap_gallery.html">「らくらく DCL」の描画例</a>
を参考にしてください. インストールされている DCL がバージョンん 5.4.4 より前の場合，
カラーマップの取り替えは gropn によるデバイスの初期化前に行う必要があります．
DCL.gropn(1) の行はそのためです．</p>
<h4><a name="label-12" id="label-12">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>tone の図を自分の好きなカラーマップに変更してみましょう.</li>
</ol>
<h3><a name="label-13" id="label-13">で，GGraph はどこにでてきたの？ （読み飛ばしてもOK）</a></h3><!-- RDLabel: "で，GGraph はどこにでてきたの？ （読み飛ばしてもOK）" -->
<p>これまでの話では，GGraph というものが何なのかよく分からないでしょう．
GGraph は，Ruby の用語ではモジュールというカテゴリーになり，
いろんなメソッドを束ねたものとなっています．
これまで説明してき tone などは GGraph のメソッドなのです．
それが陽にわかるように呼ぶには，</p>
<pre><span class=irb_input>GGraph.tone(gp)</pre></span>
<p>などと呼びます．こちらがむしろ正式な呼び方なのですが，
スタートアップファイル <a href="irbrc_ggraph.rb">irbrc_ggraph.rb</a> 
において最初の GGraph. を省略できるように設定しているのです．
DCL もモジュールですので，GGraph. を省略しないほうが対称性がよいです．
irb を使わずプログラムをファイルにして GGraph を利用する際には，
GGraph. を省略しないことを勧めます（後ほどそのレッスンもします）．</p>
<h3><a name="label-14" id="label-14">ヒストリ機能</a></h3><!-- RDLabel: "ヒストリ機能" -->
<p>長くなりましたので，ここらで一旦 irb を終了しましょう．
その前に入力内容を保存してみましょう．
<a href="irbrc_ggraph.rb">irbrc_ggraph.rb</a> には便利なヒストリ機能が定義されています
（中をみれば分かりますが，数行で実現されています）．
irb で history と入力してみてください．</p>
<pre><span class=irb_input>history</span>
gp = gpopen 'air.2012-01.nc/air' 
tone gp
gp = gpopen "air.2012-01.nc/airrr"  # air と間違えて airrr と打ってしまった ^^;
line(gp)
..(後略)..</pre>
<p>history_save と入力すると履歴が保存されます．</p>
<pre><span class=irb_input>history_save</span>
irb history saved in /home/username/irb_ggraph_history.rb
=&gt; nil</pre>
<p>履歴はホームディレクトリ直下の <a href="irb_ggraph_history.rb">irb_ggraph_history.rb</a>
というファイルに保存されます．history_save 
を引数なしで呼ぶと，履歴はこのファイルに追記されていきます．</p>
<p>irb を終了するには exit と入力します．</p>
<pre>irb(main):022:0&gt; exit</pre>
<h3><a name="label-15" id="label-15">この章で引用した資料</a></h3><!-- RDLabel: "この章で引用した資料" -->
<ul>
<li>GPhys リファレンスマニュアル
  (
  <a href="http://ruby.gfd-dennou.org/products/gphys/doc/">英語</a>,
  <a href="http://w.livedoor.jp/gphys/">日本語訳</a>
  )</li>
<li>DCLがサポートする座標系
<ul>
<li><a href="http://ruby.gfd-dennou.org/products/ruby-dcl/ruby-dcl-doc/rakuraku/node61.html">いろいろな地図投影法</a> (らくらく DCL 内)</li>
<li><a href="http://www.gfd-dennou.org/library/dcl/dcl-f77doc/Japanese/f77/grph1/node7.html">DCL マニュアルの「座標系の種類」</a></li>
</ul></li>
<li>DCL
<ul>
<li><a href="http://www.gfd-dennou.org/library/dcl/">DCLホームページ</a></li>
<li><a href="http://ruby.gfd-dennou.org/products/ruby-dcl/">RubyDCL</a> (DCLをRubyで使えるようにしたもの)</li>
<li>カラーマップ： <a href="http://www.gfd-dennou.org/library/dcl/dcl-5.4.2/src/env1/colormap/colormap_gallery.html">「らくらく DCL」の描画例</a></li>
</ul></li>
</ul>

<hr /> <small> davis Group / GFD Dennou Staff <img src="/library/dcmodel/htmltools/dcstaff_email.png" alt="dcstaff&#64;&#103;&#102;&#100;-dennou.org" align="middle" /> <br /> 

</body>
</html>
