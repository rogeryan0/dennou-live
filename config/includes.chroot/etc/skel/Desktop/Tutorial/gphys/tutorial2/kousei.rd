# GPhys, GGraph チュートリアル
#
# = 履歴 (新しいものは上から追記)
#
# * 2012/02/18 納多哲史  ページ分割, 構成案として kousei.rd に改名
# * 2012/02/16 納多哲史  index.rd として作成
#


= GPhys, GGraph チュートリアル (新版)

((*このドキュメントは作成中です. 学習には
((<"現行のチュートリアル"|URL:http://ruby.gfd-dennou.org/products/gphys/tutorial/>))
を参照ください.*))

GPhys, GGraph の機能を短時間で体験するためのチュートリアルです.
各機能の詳しい説明や, より詳しい便利な使い方については
各ページ内で紹介されている
ドキュメントを参考にしてください.

== hands on セミナー講師の方へ

時間が限られた hands on セミナーに
この資料を用いる場合の注意事項です.

* 演習問題までやると時間が足りなくなるので, 
  早く終わって手が開いた受講生に自主的に行わせるに留めてください
* タイピングが遅い自覚がある参加者には,
  本資料のコマンドのコピーペーストをすすめてください.

== 可視化の基礎

((<URL:./ggraph_hop.htm>))

意味が分からなくても, 
とにかく簡単に絵が描ける,
しかも素の C や Fortran では難しそうな
ことを体験してもらい, 
このあとの学習のモチベーションを上げてもらう.
いわゆる「つかみ」の部分.

=== 準備 (Live DVD を用いる場合は不要(の予定))

hands on セミナー参加者ではなく,
web ページでこの資料だけを見て自習する人向けの準備.

=== 描画

たった 2 行でこんなに綺麗な絵が描けます.
という「つかみ」の部分.

=== エラーが出たら

序盤から自分でデバッグさせるようにする.
実習で「エラーが出たら TA を呼んでデバッグしてもらえばいい」
という姿勢だと後日一人ではまったときにデバッグできずに
挫折する可能性が高くなると考えられるので.

=== いろんな種類の図を描いてみる

GGraph でどんな図が描けるか, を知ってもらう.
とくに検索でやってきた人が知りたいのは
「何ができるか」なので, 早い段階でそれを提示しておく.

=== 描画オプション (1)

1 行書くと描画の設定が変更されるメソッドがあることを知ってもらう.
演習問題では, やや難しいとは思うが
リファレンスマニュアルを参照する練習をしてもらう.

=== 描画オプション (2)

描画メソッドの引数でも描画の設定を変更できることを知ってもらう.

=== 出力先を変更する

図をファイルへ出したいときどうするかを知る.
gropn, grcls の使い方.

せっかく好きな図を描いてもらったところで
exit して消えるのは忍びないので,  
この編の最後にファイルの形で残してもらうようにする.

=== ドキュメントについて

チートシートの宣伝.
よく使うメソッドが机の前に貼ってあれば, 
検索で目的のものがうまく探せずに悩むことも少なくなる.

== Ruby, NArray の体験

((<URL:./step_ruby_narray.htm>))

GPhys を扱うためには Ruby, NArray の知識があったほうがよいので, 
ここで簡単に体験してもらう.
C, Fortran と文法が違う場所や, 計算や解析によく使う部分を中心に取り上げる.

=== Ruby 基礎の基礎

Ruby の雰囲気をつかんでもらう.

=== NArray 基礎の基礎

NArray の雰囲気をつかんでもらう.

== GPhys を使ってちょっと応用

((<URL:./jump_gphys.htm>))

GPhys の使い方の体験.

=== GPhys オブジェクトの操作

cut, mean の使い方を知る.

=== GPhys オブジェクトの操作その 2

直前の cut, mean の話と少し毛色が違うように思えたのと, 
ひとつにまとめると長すぎると思えたので分けただけ.

GPhys オブジェクトが NArray の要領で計算できることを知る.

=== テキスト入出力

ここから先は, 
Fortran の write 文でデータを出している学部生が
可視化に GPhys を使うようになるのを願っての節が続く.

ファイルオープンは
Ruby の文法のところに書くこともできるが, 
あえてここにおいた.

この節では, NArray <-> text を自由に行き来できるようになってもらう.

=== GPhys オブジェクトの作成

この節で NArray -> GPhys の変換を知ることで
NArray <-> GPhys を自由に行き来できるようになってもらう.
(GPhys -> NArray は既に少し前の節で val の使い方を教えている).

=== netCDF ファイルの入出力

この節で GPhys -> netCDF の出力を知ることで
GPhys <-> netCDF ファイルを自由に行き来できるようになってもらう.
(netCDF -> GPhys は GGraph の一番最初で教えている).

あと, どこかで拾ってきたファイルを開くのに困らないように
GPhys::IO.var_names の使い方をここに入れた.


=== スクリプトファイルで行うには

スクリプトファイルでもお絵かきできることを知ってもらう.

== 参考文献 (各ページ末尾)

復習用資料としての利便性のため.
また, GPhys にマニュアル (ごくらく, らくらく) がない状況では,
何か困ったときにこの資料を参照する可能性が高い.
そのときに, チュートリアルの段階で止まらず,
次の段階へ行けるようにナビゲーションをしておく.
よくある教科書の巻末の「もっと勉強するために」を念頭に置いている.

== 付録: 実際の使用例

宣伝のダメ押し.
自分の研究に使える/使いたい, と思ってもらう.

=== サンプル

Ruby DCL だが, デモを見てもらって
「こんなにいろんなことができる」
という具体例を知ってもらう.

=== 実際の研究に使われている例

dcmodel の宣伝を兼ねて.

モデルだけだとバランスが悪いので, 
観測データの図集も欲しいのですが, 良いのはあるでしょうか?


###################################################
# 以下は消さないでください (納多).
# 他のファイルには反映していませんので.
###################################################

#== 以下はより応用. チュートリアル実習では行わないが, 将来ドキュメント化する.

#=== (簡単数値計算 (必ずしもなくてもいい. Ruby のチュートリアルページに任せる))
#=== (GPhys オブジェクトの中を詳しく見てみる)
#=== (バイナリ出力にして Grads ヘッダをつける方法)
#=== (tips) Ruby の map の使い方
#=== history_grep とかの使い方
#=== 重み付き平均
#=== ~/.irbrc の中身の解説. いじる方法

#=== (その他メモ)
# (演習問題には解答編は不要だが, 
# サンプルとしてはチュートリアル内でなくてもいいのでどこかにあったほうがいい)

# (検討: irbrc_ggraph.rb は, 今後のために, 日付でいいのでバージョン番号が必要かもしれない.
# 優先度は低いが, いっそのことユーティリティとして製品群に含めてはどうか?)

# どこかに, 「何カラム目は何の量だったか」を考えなくて良い, という旨を書く
# 逆引き Ruby も示したらいいかも.

# (検討: 可能なら ~/.irb_history が保存されるようにして, exit 前の履歴も遡れるようにしたい)

# サンプルデータ
#(検討: あとあと (ベクトル図の描画など) を考えると, 別の変数で 2 つ以上あったほうがいい?)

#(検討: 複数日のデータが入っているといい)

#(検討: ~/.irbrc で include DCL したほうがよいかもしれない)

#=== 用語の説明

#このあと頻出する用語について簡単に解説しておきます.
#ここでは厳密な意味は説明しないので, 
#時間があるときに各自勉強しておいてください.
#
## ここで一気に出さずに, 後の節から登場するものは後の節で説明したらいいかも.
#
#* オブジェクト: 変数, 定数, 文字列などの総称
#* クラス: オブジェクトの種類. 数値, 文字列などがある.  # 説明が toggle している
#* メソッド: 命令のようなもの
#* ライブラリ: オブジェクトやメソッドなどをまとめたもの
#* GPhys: データを扱うためのライブラリ
#* GGraph: 描画ライブラリ
#* RubyDCL: GGraph が下請けに使っている描画ライブラリ.
#* Ruby: プログラミング言語のひとつ.



