<?xml version="1.0" encoding="euc-jp" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<title>4. SPMODEL プログラミング</title>
<meta http-equiv="Content-type" content="text/html; charset=euc-jp" />
<link href="dcmodel.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h5>
<center>
<table cellSpacing=0 cellPadding=0 width="100%" border=0>

<p><tr><td align=left>
<b>階層的地球流体スペクトルモデル集 SPMODEL</b>
</td><td align=right>
    << <a href=sec3.htm>Prev</a> |
       <a href=../index_ja.htm>Index</a>|
       <a href=sec5.htm>Next</a>    >>
    </td></p>
<tr>
</table>
</center>
<hr>
</h5>

<h2><a name="label-0" id="label-0">4. SPMODEL プログラミング</a></h2><!-- RDLabel: "4. SPMODEL プログラミング" -->
<h3><a name="label-1" id="label-1">4.1. SPMODEL におけるプログラミングの手順</a></h3><!-- RDLabel: "4.1. SPMODEL におけるプログラミングの手順" -->
<p>ここでは spmodel ライブラリを用いたスペクトル法による流体計算の
プログラミングの手順を説明する. 
スペクトル法による流体数値計算の基本的な知識は<a href="ref.htm">[5]</a>
などを参照していただきたい. 
手順は次のようになる. </p>
<ol>
<li>流体領域と境界条件に適合した spmodel ライブラリのモジュールを選択する</li>
<li>支配方程式を形式的にスペクトル変換する. </li>
<li>適当なスキームで時間に関して差分化する. </li>
<li>2 および 3 で作成した定式化にしたがってプログラムを書き下す. </li>
</ol>
<p>以下, 例として周期的境界の下での長さ L の 1 次元領域で
KdV 方程式の時間発展を計算するためのプログラミングを行なってみる. 
支配方程式は</p>
<center><img src=sec4_1.png align=bottom></center>
<p>1. 使用するモジュールは <a href="sec3.htm">第3節</a> の例で示した
1次元周期境界条件用のものである. </p>
<p>2. 空間次元 x に関する Forier 変換および逆変換は
次のように定義される. </p>
<center><img src=sec4_2.png align=bottom></center>
<p>支配方程式を Fourier 変換すると</p>
<center><img src=sec4_3.png align=bottom></center>
<p>チルダ記号と下付き添字とで Fourier 変換の波数成分を表している. </p>
<p>3. 時間に関して, たとえばオイラー法で差分化すると</p>
<center><img src=sec4_4.png align=bottom></center>
<p>ここで, 各項の上付き添字 <i>&tau;</i>, <i>&tau;+1</i> は
現在の時間ステップと次の時間ステップを表している. </p>
<p>4. 以上の定式化から, プログラムの時間積分ループ部分は以下のように書き
下すことができる.</p>
<pre>do it=1,nt
    e_Zeta = e_Zeta + dt * &amp;
            ( -e_g(g_e(e_Zeta)*g_e(e_Dx_e(e_zeta))) &amp; 
              - e_Dx_e(e_Dx_e(e_Dx_e(e_zeta)))  ) 
enddo</pre>
<p>非線形項の見積もりには, 
実空間へ逆変換した格子点上にて積を計算し再び波数空間へと変換する方法, 
すなわち, <!-- Reference, RDLabel "変換法" doesn't exist --><em class="label-not-found">変換法</em><!-- Reference end --> を適用している.</p>
<h3><a name="label-2" id="label-2">4.2. SPMODEL プログラミングの利点</a></h3><!-- RDLabel: "4.2. SPMODEL プログラミングの利点" -->
<ul>
<li><p>プログラムの構築が容易</p>
<p>上の例での
<em>最終的なプログラムの主要部が元々の支配方程式の
数学的形式と対応がついている</em>
ことに注意されたい. 
この点が SPMODEL プログラミングの最大の利点である. 
スペクトル法による数値計算でありながら, 
簡単な支配方程式ならば直接プログラムを書き下すことができる. 
さらに, 関数の機能と入出力の配列が定義されている空間がわかるよう
関数の名前が統一されているので, 
マニュアルをあまり見なくてもプログラムを書いていくことができる. </p>
<p>これに対して(例えば FORTRAN77 を使った)従来のスペクトル法による数値計算の
プログラミングでは, 
波数や成分間の相互作用の形を含んだ各スペクトル成分の式を
書き下す定式化の作業が必要があり, 
その作業コストが無視できなかった. </p></li>
<li><p>プログラムが可読である</p>
<p>プログラムソースコードは元の支配方程式の数学的表現と良く対応している
ので, プログラムを理解することが容易である. </p>
<p>対して(例えば FORTRAN77 を使った)従来のスペクトル法による数値計算では, 
プログラムのために定式化された式が支配方程式から形が変わってしまうので, 
でき上がったプログラムから支配方程式を読み取ることは困難である. </p></li>
<li><p>プログラムの修正や改変も容易である. </p>
<p>上記二つの特徴の結果として容易な修正や改変が可能となっている. </p></li>
</ul>
<h5>
<hr>
<center>
<table cellSpacing=0 cellPadding=0 width="100%" border=0>

<p><tr><td align=left>
<b>階層的地球流体スペクトルモデル集 SPMODEL</b>
</td><td align=right>
    << <a href=sec3.htm>Prev</a> |
       <a href=../index_ja.htm>Index</a>|
       <a href=sec5.htm>Next</a>    >>
    </td></p>
<tr>
</table>
</center>
</h5>


</body>
</html>
