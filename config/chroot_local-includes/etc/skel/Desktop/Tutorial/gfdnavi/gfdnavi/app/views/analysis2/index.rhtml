<script>
  <%
  dm_priority = {"tone_contour" => 0, "line" => 1, "vector" => 2}
  draw_methods = []
  DrawMethod.find(:all, :user => @user).sort_by{|dm| dm_priority[dm.name] || 99}.each{|dm|
    next if dm.name == "cut"
    raise unless /\A\/usr\/([^\/]+)\/draw_methods\// =~ dm.path
    user = $1
    user = nil if user == "root"
    draw_methods.push({:name => dm.name, :user => user, :nvars => dm.nvars, :ndims => dm.ndims, :description => dm.description, :opts => []})
    dm.draw_method_options.each{|dmo|
      draw_methods[-1][:opts].push({:name => dmo.name, :type => dmo.value_type.name, :min => dmo.min, :max => dmo.max, :description => dmo.description})
      if dmo.value_type.name=="boolean"
        case dmo.default.to_s.downcase
        when "false", "f", "0", "nil", ""
          draw_methods[-1][:opts][-1][:default] = false
        else
          draw_methods[-1][:opts][-1][:default] = true
        end
      else
        draw_methods[-1][:opts][-1][:default] = dmo.default
      end
    }
  }
  %>
  var drawMethods = <%= draw_methods.to_json %>;

  <%
  analysis_functions = []
  Function.find(:all, :user => @user).each{|fn|
    next if fn.name == "cut"
    raise unless /\A\/usr\/([^\/]+)\/functions\// =~ fn.path
    user = $1
    user = nil if user == "root"
    analysis_functions.push({:name => fn.name, :user => user, :nvars => fn.nvars, :description => fn.description, :args => []})
    fn.function_arguments.each{|arg|
      analysis_functions[-1][:args].push({:description => arg.description, :type => arg.value_type.name, :default => arg.default})
    }
  }
  %>
  var analFuncs = <%= analysis_functions.to_json %>;

  var variables = <%= @vars ? @vars.to_json : [] %>;

  var projections = <%= VirtualData::DRAW_PROJECTION.sort_by{|prj| prj[:itr]}.to_json %>;

  var colorMapNames = <%= VirtualData::COLOR_MAPS.sort.map{|m| m[1].strip}.to_json %>;

  <%
  draw_opts_default = {}
  VirtualData.class_eval("@@draw_options").each{|key, val|
    draw_opts_default[key] = val[:default]
  }
  %>
  var drawOptsDefault = <%= draw_opts_default.to_json %>;

  var drawSizeList = <%= VirtualData::DRAW_SIZE.to_json %>;

  var size_limit_1 = <%= NumRu::GPhys::read_size_limit_1 || GPHYS_READ_SIZE_LIMIT_1 || "null" %>;
  var size_limit_2 = <%= NumRu::GPhys::read_size_limit_2 || GPHYS_READ_SIZE_LIMIT_2 || "null" %>;

  var leftAllAxesIndex = <%= @all_axes_index.to_json %>;
</script>

<div class="main_buttons">
  <% unless (GFDNAVI_DISABLE_USER && session[:user].nil?) %>
    <input type="button" onclick="createKnowledgeWithAllDiagrams();" value="Create a knowledge document">
  <% end %>
  <input type="button" id="clear_all" onclick="clearAll();" value="Clear all" class="clear_all">
  <nobr>
    (<input id="fullImageButton" type="radio" onclick="setThumbnails(false);" name="thumbnailsOrFullImages" checked="true"><label for="fullImageButton">Full images</label>
    <input id="thumbnailButton" type="radio" onclick="setThumbnails(true);" name="thumbnailsOrFullImages"><label for="thumbnailButton">Thumbnails</label>)
  </nobr>
  [<%= link_to("Old version", :controller => "analysis") %>]
</div>
<div id="leftpanels" class="leftpanels"></div>

<div>
  <div id="add_diagram_button_left" class="diagram_div diagram_div_nonactive add_button" onclick="addNewDiagram(null, 0);" title="Add a new diagram">
    +
  </div>
  <!-- diagrams will be inserted in the span below -->
  <span id="analysis2_diagrams"></span>
  <div id="add_diagram_button_right" class="diagram_div diagram_div_nonactive add_button" onclick="addNewDiagram(null, null);" title="Add a new diagram">
    +
  </div>
</div>

<script>
    /* CREATE LEFTPANELS */
    var leftPanels = new LeftPanelWindows("leftpanels");

    var leftvars_contents = 'Variables:<br><div class="div_indent">';
    <% @vars.each_with_index{|v,i| %>
    leftvars_contents += '<label class="left_variables_name" title="<%= v %>" id="left_variables_name_<%= i %>"><%= File.basename(v) %></label> ';
    <% } %>
    leftvars_contents += "</div>";
    leftvars_contents += 'Axes:<br><div class="div_indent">';
    <% @uniq_axes.each_with_index{|ax, i| %>
    leftvars_contents += '<label class="left_axes_name" id="left_axes_<%= i %>">'
      + '<%= ax[0]%>' + ' '
      + '<span class="left_axes_units">[<%= ax[1] %>]</span>'
      + '</label><br/>';
    <% } %>
    leftvars_contents += "</div>";
    leftPanels.addWindow("vars", "Input", leftvars_contents);
    <% @vars.each_with_index{|v,i|
        desc = "<table>"
        desc += "<tr><th colspan=2 align=left>#{v}</th></tr>"
        desc += '<tr><td colspan=2 align=left>[<a href="/data' + v + '.html">Description</a>] '
        desc += '[<a href="/data' + v + '.rb">Ruby script</a>]</td></tr>'
        desc += "<tr><td colspan=2 align=left>"
        desc += "<input id='add_diagram_button_var#{i}' type='button' onclick='addNewDiagram([{\"input\":[{\"input\":[\"#{v}\"]}]}], 0);' value='Add a new diagram with this'>"
        desc += "</td></tr>"
        desc += "</table>"
    %>
        new PopupMenu($('left_variables_name_<%= i %>'), 'left_variables_name_<%= i %>', '<%= escape_javascript(desc) %>');
        $("left_variables_name_<%= i %>").observe("mouseover", leftVariablesNameMouseOver.bind(this, <%= i%>));
        $("left_variables_name_<%= i %>").observe("mouseout", leftVariablesNameMouseOut.bind(this, <%= i%>));
    <% } %>

    leftPanels.addWindow("anim", "Method & Axis", "");
    leftPanels.getContents('anim').title = "Please use checkbox in 'Method & Axis' of each diagram to activate animation";
    var globalAnim = new GlobalAnimation(leftPanels.getContents('anim'));
    /* END OF LEFTPANEL */
        
    var date = new Date();
    var dgjson = new Ajax.Request(gfdnaviUrlRoot + "/analysis2/get_diagrams",
                                  {asynchronous:false,
                                   evalScripts:true,
                                   parameters: 'timestamp=' + date.getTime(), /* to disable cache */
                                   onFailure: function(){alert('failed');},
                                   method: 'get'});
    /* Using eval directly is not safe.
     * JSON.parse may not work on old browsers. 
     * String#evalJSON is defined in prototype.js. 
     * option: sanitize (This must be true when remote data is given.) */
    var jsontext = dgjson.transport.responseText;
    if(jsontext){
        /* dgs is assumed to be an Array */
        var dgs = jsontext.evalJSON(true);
        /* each element of Array is JSON text */
        dgs.each(function(dg){addNewDiagram(dg.evalJSON(true), null);});
    }

    if((diagrams.length == 0) && (variables.length > 0)) addNewDiagram(null, null);

    $("leftpanels_button").observe("click", leftPanelButtonClicked);
</script>
