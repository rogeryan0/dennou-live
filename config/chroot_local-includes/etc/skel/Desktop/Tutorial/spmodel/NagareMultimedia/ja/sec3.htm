<?xml version="1.0" encoding="euc-jp" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<title>3. SPMODEL ライブラリ(spml)</title>
<meta http-equiv="Content-type" content="text/html; charset=euc-jp" />
<link href="dcmodel.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h5>
<center>
<table cellSpacing=0 cellPadding=0 width="100%" border=0>

<p><tr><td align=left>
<b>階層的地球流体スペクトルモデル集 SPMODEL</b>
</td><td align=right>
    << <a href=sec2.htm>Prev</a> |
       <a href=../index_ja.htm>Index</a>|
       <a href=sec4.htm>Next</a>    >>
    </td></p>
<tr>
</table>
</center>
<hr>
</h5>

<h2><a name="label-0" id="label-0">3. SPMODEL ライブラリ(spml)</a></h2><!-- RDLabel: "3. SPMODEL ライブラリ(spml)" -->
<h3><a name="label-1" id="label-1">3.1. サブルーチンと関数の例</a></h3><!-- RDLabel: "3.1. サブルーチンと関数の例" -->
<p><a href="ref.htm">SPMODEL ライブラリ (spml) <sup>[4]</sup></a> は, 
スペクトル法による流体計算のための基本的な
関数を提供するライブラリである. 
これらの関数群は, 
スペクトル計算のための既存 FORTRAN77 ライブラリである
<a href="ref.htm#ISPACK">ISPACK<sup>[2]</sup></a> のサブルーチン群を,
<a href="sec2.htm">第 2 節</a> 
で説明した Fortran90 で強化された配列機能を利用してくるむことにより
作成されたものである. 
ISPACK が提供していた格子点空間とスペクトル空間との変換に加えて, 
微分積分計算をも関数として新たに追加している. </p>
<p>SPMODEL ライブラリが提供するサブプログラムの例として, 
1 次元周期境界条件領域用のサブルーチンと関数のいくつかを以下に示す. </p>
<ul>
<li><p>初期化 : スペクトル変換の格子点数, 波数, 計算領域の設定.</p>
<pre>subroutine ae_initial(im,km,xmin,xmax)</pre></li>
<li><p>スペクトル正変換, 逆変換.</p>
<pre>function g_e(e)
    real(8), dimension(0:im-1)             :: g_e
    real(8), dimension(-km:km), intent(in) :: e

function e_g(g)
    real(8), dimension(-km:km)              :: e_g
    real(8), dimension(0:im-1), intent(in)  :: g</pre></li>
<li><p>微分 : 空間微分のスペクトル変換 (スペクトル変換に波数をかける).</p>
<pre>function e_Dx_e(e)
    real(8), dimension(-km:km)                 :: e_Dx_e
    real(8), dimension(-km:km), intent(in)     :: e</pre></li>
<li><p>積分 : 空間積分ならびに空間平均.</p>
<pre>function Int_g(g), function Avr_g(g)
    real(8), dimension(0:im-1), intent(in)   :: g
    real(8)                                  :: Int_g, Avr_g</pre></li>
</ul>
<h3><a name="label-2" id="label-2">3.2. 関数の命名法と書法</a></h3><!-- RDLabel: "3.2. 関数の命名法と書法" -->
<p>SPMODEL ライブラリの関数の名前は</p>
<pre>(出力データ空間識別子)_(機能)_(入力データ空間識別子)</pre>
<p>といった形に統一されている. </p>
<p>名前自体は冗長になるが, 
関数への入力データと関数からの出力とが定義されている空間
(たとえばスペクトル空間か実空間か), 
ならびに, 関数の機能を名前からわかるようにすることで, 
操作内容を読みとりやすくし, 同時に, プログラム間違いを減らすことを
狙っている. </p>
<p>関数の命名法にあわせて, 格子点およびスペクトルデータを表す配列を</p>
<pre>(変数のデータ空間識別子)_(変数名) </pre>
<p>といった形式にそろえて用いることを推奨している. 
関数と関数が作用する変数の書式を統一することにより,
以下の例で示すように, 
数式表現で良くもちいられるテンソル表現に
類似した表現形式をもったプログラムを作成することができる. </p>
<p>1 次元周期境界条件用モジュールで用意されている関数の場合で
例示しよう. 
先にリストしたように, 
スペクトル変換と微分は次のような名前を与えられていた:</p>
<pre>g_e(e_Data)      ! スペクトルから格子点への変換
e_g(g_Data)      ! 格子点からスペクトルへの変換
e_Dx_e(e_Data)   ! x 微分(波数をかける)</pre>
<p>関数の接頭子 e_, g_ は, 
関数の出力がそれぞれスペクトル空間および実空間(格子点)で
定義されているデータ配列であることを示す
データ空間識別子である. 
一方, 関数の接尾子 _e, _g は, 関数への入力データがそれぞれ
スペクトル空間および実空間(格子点)で定義された
データ配列であることを示すデータ空間識別子である. 
配列データも同じ表記に従い, 
e_Data, g_Data はそれぞれ, 
スペクトルデータおよび実空間(格子点)データであることを示している. </p>
<p>これらの関数を用いると, 格子点データ配列 g_Data1 の x 微分を
スペクトル変換して計算し, 格子点配列 g_Data2 に格納することが</p>
<pre>g_Data2 = g_e(e_Dx_e(e_g(g_Data1)))</pre>
<p>という 1 行で表記できる. 
接頭子と接尾子がちょうどテンソル計算での添字の縮約規則のように
対になって現れることに注意されたい. </p>
<h5>
<hr>
<center>
<table cellSpacing=0 cellPadding=0 width="100%" border=0>

<p><tr><td align=left>
<b>階層的地球流体スペクトルモデル集 SPMODEL</b>
</td><td align=right>
    << <a href=sec2.htm>Prev</a> |
       <a href=../index_ja.htm>Index</a>|
       <a href=sec4.htm>Next</a>    >>
    </td></p>
<tr>
</table>
</center>
</h5>


</body>
</html>
