#!/usr/bin/env ruby
require File.dirname(__FILE__) + '/../config/boot'

require 'active_support'
require 'fileutils'

puts "=> Booting WEBrick..."

%w(cache pids sessions sockets).each { |dir_to_make| FileUtils.mkdir_p(File.join(RAILS_ROOT, 'tmp', dir_to_make)) }

require 'webrick'
require 'webrick/https'
require 'optparse'

OPTIONS = {
  :port            => 3000,
  :ip              => "0.0.0.0",
  :environment     => (ENV['RAILS_ENV'] || "development").dup,
  :server_root     => File.expand_path(RAILS_ROOT + "/public/"),
  :server_type     => WEBrick::SimpleServer,
  :charset         => "UTF-8",
  :mime_types      => WEBrick::HTTPUtils::DefaultMimeTypes
}

ARGV.options do |opts|
  script_name = File.basename($0)
  opts.banner = "Usage: ruby #{script_name} [options]"

  opts.separator ""

  opts.on("-p", "--port=port", Integer,
          "Runs Rails on the specified port.",
          "Default: 3000") { |v| OPTIONS[:port] = v }
  opts.on("-b", "--binding=ip", String,
          "Binds Rails to the specified ip.",
          "Default: 0.0.0.0") { |v| OPTIONS[:ip] = v }
  opts.on("-e", "--environment=name", String,
          "Specifies the environment to run this server under (test/development/production).",
          "Default: development") { |v| OPTIONS[:environment] = v }
  opts.on("-m", "--mime-types=filename", String,
                  "Specifies an Apache style mime.types configuration file to be used for mime types",
                  "Default: none") { |mime_types_file| OPTIONS[:mime_types] = WEBrick::HTTPUtils::load_mime_types(mime_types_file) }

  opts.on("-d", "--daemon",
          "Make Rails run as a Daemon (only works if fork is available -- meaning on *nix)."
          ) { OPTIONS[:server_type] = WEBrick::Daemon }

  opts.on("-c", "--charset=charset", String,
          "Set default charset for output.",
          "Default: UTF-8") { |v| OPTIONS[:charset] = v }

  opts.separator ""

  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }

  opts.parse!
end

ENV["RAILS_ENV"] = OPTIONS[:environment]
RAILS_ENV.replace(OPTIONS[:environment]) if defined?(RAILS_ENV)

require RAILS_ROOT + "/config/environment"
require 'webrick_server'

OPTIONS['working_directory'] = File.expand_path(RAILS_ROOT)

puts "=> Rails application started on https://#{OPTIONS[:ip]}:#{OPTIONS[:port]}"
puts "=> Ctrl-C to shutdown server; call with --help for options" if OPTIONS[:server_type] == WEBrick::SimpleServer

class SSLDispatchServlet < DispatchServlet
  def self.dispatch(options={})

    Socket.do_not_reverse_lookup = true

    # keys for localhost
    ssl_certificate = <<"EOS"
-----BEGIN CERTIFICATE-----
MIICTTCCAbagAwIBAwIBADANBgkqhkiG9w0BAQUFADAUMRIwEAYDVQQDDAlsb2Nh
bGhvc3QwHhcNMDcxMTEwMDUyMDEyWhcNMDgxMTA5MDUyMDEyWjAUMRIwEAYDVQQD
DAlsb2NhbGhvc3QwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALSGK8VpvJ2F
2eshxjBhV0dygEZcweC3j9k82M4XdsxDwjYS5L0dlKuU+U2RP0eBc3nV/K6rj3ex
6gqKRmz4Zwp04/v436HmOKDxsvQlYJl0nW1fagOF1EBFnCvd4d6mfrJ85OtLLbt9
X9OnaE4QESKK7hS0mk3PJspfddtLbGTzAgMBAAGjga4wgaswCQYDVR0TBAIwADAL
BgNVHQ8EBAMCBSAwHQYDVR0OBBYEFISoThjAnWOubNstBC2ExZEK28tnMBMGA1Ud
JQQMMAoGCCsGAQUFBwMBMB8GCWCGSAGG+EIBDQQSFhB0ZXN0IGNlcnRpZmljYXRl
MDwGA1UdIwQ1MDOAFISoThjAnWOubNstBC2ExZEK28tnoRikFjAUMRIwEAYDVQQD
DAlsb2NhbGhvc3SCAQAwDQYJKoZIhvcNAQEFBQADgYEAnfJCvwemcW4DnSQ6SLWV
oZrrEL87KjuAXYxxrfIhyb2i4FD4p1R4kAy8xX884Egcy0LdH+7UCAA7TuVz7Ye+
NIcTlvimQUgPx+8kZPxmKou8TKEtOuf8Lkjq/s81uE3QUoiI3JeInT66knCIMLgE
m8NObj4uxBQYJ4fy7CTCGiM=
-----END CERTIFICATE-----
EOS
    ssl_private_key = <<"EOS"
-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQC0hivFabydhdnrIcYwYVdHcoBGXMHgt4/ZPNjOF3bMQ8I2EuS9
HZSrlPlNkT9HgXN51fyuq493seoKikZs+GcKdOP7+N+h5jig8bL0JWCZdJ1tX2oD
hdRARZwr3eHepn6yfOTrSy27fV/Tp2hOEBEiiu4UtJpNzybKX3XbS2xk8wIDAQAB
AoGAHZE0LhtJZ0t7C8X2Xgozb2JTnDKpFpM6HkyW/fpd3MrkTlL93/OuXAQEaS32
/VE4hqYDwuAamXIscRmAu2xcA9XQtxj1Y+FGVD3P/vB0UtboOVEz0gn/98Y1u2G/
b+L4PCxwU6cN1boFGKX+J97ps1fOMMMz2xoCmy88J9mKpCECQQDnaqbRs+2cqcFZ
jzA9po+dBM13etTfqAeKH9Wu/MBeo0wft8OHQYGxK5TQcxQdfG82U5L/JmMsXZjL
N9B8dkQrAkEAx7OA5pMkpmxBa96Ve8EE8pGDHArFMO29ztz7/zlpNLoUKaZO8N4K
Y3ALQE48WtAsyJ5PHV+7j21YRERcPNkWWQJAUlr/MSPiTN2QxKmTlm0fMNcTtBCP
j2TCAiLgLd0fLM7aeXMxb4IdgIqs9B3wK6or/d5yMsFbi99nT/L2DEUebwJAZVxG
4MFuqMnpqsafOOEPkc8prOIKlHsXDBg+D50kOQ75jOpMxxTsUOxdyZXsLGvdTzaL
EW211Wa6lmvcJUZKgQJAPkNLxolcBgz+4QE2jqVvdbmxDIydOzPDeC3AJCUa7KUI
lTbn0L2reQGmdCkfBXcPt1Bs8Ub6zcSx0HDDKtykYQ==
-----END RSA PRIVATE KEY-----
EOS

    params = {:Port            => options[:port].to_i,
              :ServerType      => options[:server_type],
              :BindAddress     => options[:ip],
              :SSLEnable       => true,
              :SSLCertificate  => OpenSSL::X509::Certificate.new(ssl_certificate),
              :SSLPrivateKey   => OpenSSL::PKey::RSA.new(ssl_private_key)
#              :SSLVerifyClient => OpenSSL::SSL::VERIFY_NONE,
#              :SSLCertName     => [ ["CN", WEBrick::Utils::getservername ]]
    }
    params[:MimeTypes] = options[:mime_types] if options[:mime_types]

    server = WEBrick::HTTPServer.new(params)
    server.mount('/', DispatchServlet, options)
    trap("INT") { server.shutdown }
    server.start
  end
end


SSLDispatchServlet.dispatch(OPTIONS)
