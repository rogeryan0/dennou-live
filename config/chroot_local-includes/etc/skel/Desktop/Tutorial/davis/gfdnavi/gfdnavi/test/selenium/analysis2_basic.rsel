# It's often a good idea to start the test with 'setup'.
# See /selenium/setup for more info.

def wait_for_image_loaded(id)
  wait_for_eval <<"EOS", 'false'
var win = this.page().getCurrentWindow();
var diagrams = (win.diagrams) ? win.diagrams : win.wrappedJSObject.diagrams;
diagrams[#{id}].imageLoading;
EOS
end

def test_open_close(button, value_opened, value_closed, blocks)
  assert_value button, value_opened
  blocks.each{|block| assert_visible block}
  click button
  assert_value button, value_closed
  blocks.each{|block| assert_not_visible block}
  click button
  assert_value button, value_opened
  blocks.each{|block| assert_visible block}
end

setup :fixtures => :all

# ADD A VARIABLE FOR THE TEST AND REDIRECT TO ANALYSIS2
open '/finder/add_to_list?path=%2Fsamples%2Freanalysis%2Fncep%2FT.jan.nc'

# CHECK VARIABLE INFO ON THE LEFT PANEL
assert_element_present 'left_variables_name_0'
assert_text 'left_variables_name_0', "T"
3.times{|i| assert_element_present "left_axes_#{i}"} # RANK IS SUPPOSED TO BE 3

# CHECK POPUP FOR THE VARIABLE
click 'left_variables_name_0'
assert_element_present 'popup_menu_left_variables_name_0'

# OPEN AND CLOSE LEFT PANELS
test_open_close('leftpanels_anim_showhide', 'Hide', 'Show', ['leftpanels_anim_contents'])
test_open_close('leftpanels_vars_showhide', 'Hide', 'Show', ['leftpanels_vars_contents'])
test_open_close('leftpanels_button', '<', '>', ['leftpanels_anim', 'leftpanels_vars'])

# CHECK DIAGRAM
assert_element_present 'diagram0'

# OPEN AND CLOSE WINDOWS
[0, 1, 2, 3].each{|i| assert_not_visible "diagram0_optwins_#{i}"}
click 'diagram0_dm_window_button'
assert_visible 'diagram0_optwins_1'
[0, 2, 3].each{|i| assert_not_visible "diagram0_optwins_#{i}"}
click 'diagram0_dm_window_button' # CLICK AGAIN TO CLOSE
[0, 1, 2, 3].each{|i| assert_not_visible "diagram0_optwins_#{i}"}
click 'diagram0_dm_window_button'
click 'diagram0_optwins_1_close' # CLICK CLOSE BUTTON ON THE WINDOW TO CLOSE
[0, 1, 2, 3].each{|i| assert_not_visible "diagram0_optwins_#{i}"}
click 'diagram0_dm_window_button'
click 'diagram0_image' # CLICK DIAGRAM TO CLOSE
[0, 1, 2, 3].each{|i| assert_not_visible "diagram0_optwins_#{i}"}
%w(inputs dm opts menu).each_with_index{|win, i|
  click "diagram0_#{win}_window_button" # MOVE FROM ONE WINDOW TO ANOTHER
  unless i == 1 # i == 1 IS ALREADY CHECKED
    assert_visible "diagram0_optwins_#{i}"
    ([0, 1, 2, 3] - [i]).each{|i| assert_not_visible "diagram0_optwins_#{i}"}
  end
}

# OPEN AND CLOSE BLOCK FOR DRAW GENERAL OPTIONS
click 'diagram0_image'
click 'diagram0_opts_window_button'
test_open_close('diagram0_layer0_dgo_showhide', 'Hide', 'Show', ['diagram0_layer0_dgo'])

# DEFAULT DIAGRAM (JUST CONFIRMATION)
click 'diagram0_image'
click "diagram0_dm_window_button"
select "diagram0_layer0_dm", "tone_contour"
select "diagram0_layer0_dm_dims_new_axis0", "lon"
select "diagram0_layer0_dm_dims_new_axis1", "lat"
# CHECK ENABLED/DISABLED PROJECTIONS
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[1].disabled;', 'true' # LOG IN Y
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[2].disabled;', 'true' # LOG IN X
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[3].disabled;', 'true' # LOG-LOG
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[6].disabled;', 'false' # MAP

# CHANGE PROJECTION
click 'diagram0_opts_window_button'
select "diagram0_layer0_dgo_projection", "value=10" # EQUIDISTANT LON-LAT
wait_for_image_loaded(0)

# CHANGE DIAGRAM SIZE
%w(L M S XS).each{|size| click "diagram0_layer0_dgo_size_#{size}"; wait_for_image_loaded(0)}

# CHANGE VIEWPORT
type "diagram0_layer0_dgo_vptx_left_text", "0.1"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vptx_left_text", "0.15"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vptx_right_text", "0.9"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vptx_right_text", "0.5"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vpty_left_text", "0.1"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vpty_left_text", "0.15"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vpty_right_text", "0.9"
wait_for_image_loaded(0)
type "diagram0_layer0_dgo_vpty_right_text", "0.5"
wait_for_image_loaded(0)
# TRY LEFT VALUE > RIGHT VALUE
type "diagram0_layer0_dgo_vptx_left_text", "0.8"
wait_for_image_loaded(0)
# ASSERT LEFT AND RIGHT VALUES ARE SWAPPED
assert_value 'diagram0_layer0_dgo_vptx_left_text', '0.5'
assert_value 'diagram0_layer0_dgo_vptx_right_text', '0.8'
# TRY LEFT VALUE == RIGHT VALUE
type "diagram0_layer0_dgo_vptx_right_text", "0.5"
wait_for_image_loaded(0)
# ASSERT LEFT AND RIGHT VALUES ARE DIFFERENT
assert_eval 'this.page().findElement("diagram0_layer0_dgo_vptx_left_text").value != this.page().findElement("diagram0_layer0_dgo_vptx_right_text").value;', 'true'
# TRY INVALID TEXT
type "diagram0_layer0_dgo_vptx_left_text", "hoge"
wait_for_image_loaded(0)
# ASSERT VALUE IS NUMBER
#assert_eval 'Object.isNumber(this.page().findElement("diagram0_layer0_dgo_vptx_left_text").text);', 'true'

# CHANGE AXES
select "diagram0_layer0_dm_dims_new_axis0", "lat"
wait_for_image_loaded(0)
# CHECK IF AXES ARE KEPT DIFFERENT WITH EACH OTHER
assert_not_selected_label "diagram0_layer0_dm_dims_new_axis1", "lat"
select "diagram0_layer0_dm_dims_new_axis1", "level"
wait_for_image_loaded(0)
# CHECK ENABLED/DISABLED PROJECTIONS
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[1].disabled;', 'false' # LOG IN Y
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[2].disabled;', 'true' # LOG IN X
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[3].disabled;', 'true' # LOG-LOG
assert_eval 'this.page().findElement("diagram0_layer0_dgo_projection").options[6].disabled;', 'true' # MAP
# CHECK IF PROJECTION IS CHANGED TO LINEAR-LINEAR
assert_selected_index "diagram0_layer0_dgo_projection", "0"

# CHANGE PROJECTION
click 'diagram0_opts_window_button'
wait_for_image_loaded(0)
select "diagram0_layer0_dgo_projection", "value=2" # LOG IN Y

# CHANGE AXES AGAIN
select "diagram0_layer0_dm_dims_new_axis0", "lon"
select "diagram0_layer0_dm_dims_new_axis1", "lat"
wait_for_image_loaded(0)
# CHECK IF PROJECTION IS CHANGED TO LINEAR-LINEAR
assert_selected_index "diagram0_layer0_dgo_projection", "0"

# CHANGE COLOR MAP
select "diagram0_layer0_dgo_colormap", "value=2"
wait_for_image_loaded(0)

# RESET GENERAL OPTIONS
click 'diagram0_opts_window_button'
click 'diagram0_layer0_dgo_reset'
wait_for_image_loaded(0)
# CHECK IF DEFAULT VALUES ARE SET
# JAVASCRIPT VARIABLES ARE NOT ACCESSIBLE DIRECTLY
assert_eval <<EOS, 'true'
var win = this.page().getCurrentWindow();
var drawOptsDefault = (win.drawOptsDefault) ? win.drawOptsDefault : win.wrappedJSObject.drawOptsDefault;
this.page().findElement("diagram0_layer0_dgo_projection").value == drawOptsDefault.projection
&& this.page().findElement("diagram0_layer0_dgo_colormap").value == drawOptsDefault.colormap
&& this.page().findElement("diagram0_layer0_dgo_vptx_left_text").value == drawOptsDefault.viewport[0]
&& this.page().findElement("diagram0_layer0_dgo_vptx_right_text").value == drawOptsDefault.viewport[1]
&& this.page().findElement("diagram0_layer0_dgo_vpty_left_text").value == drawOptsDefault.viewport[2]
&& this.page().findElement("diagram0_layer0_dgo_vpty_right_text").value == drawOptsDefault.viewport[3];
EOS

# ADD DIAGRAMS
click 'add_diagram_button_left'
wait_for_image_loaded(1)
# diagram1 SHOULD APPEAR TO THE LEFT OF diagram0
assert_eval 'this.page().findElement("diagram1").nextSibling.id;', 'diagram0'
click 'add_diagram_button_right'
wait_for_image_loaded(2)
# diagram2 SHOULD APPEAR TO THE RIGHT OF diagram0
assert_eval 'this.page().findElement("diagram0").nextSibling.id;', 'diagram2'
click 'add_diagram_button_var0' # POPUP MENU IS SUPPOSED TO BE OPENED
wait_for_image_loaded(3)
# diagram3 SHOULD APPEAR TO THE LEFT OF diagram1
assert_eval 'this.page().findElement("diagram3").nextSibling.id;', 'diagram1'

# CHANGE DRAW METHOD OF DIAGRAM 2
click "diagram2_image"
click "diagram2_dm_window_button"
select "diagram2_layer0_dm", "line" # TONE_CONTOUR (2D, root) -> LINE (1D, bob)
wait_for_image_loaded(2)
#assert_element_not_present "diagram2_layer0_dm_dims_new_axis1" # 1D
select "diagram2_layer0_dm_dims_new_axis0", "level"
wait_for_image_loaded(2)
# CHANGE PROJECTION
select "diagram0_layer0_dgo_projection", "value=3" # LOG IN X
wait_for_image_loaded(2)
# EXCHANGE X AND Y
click "diagram2_opts_window_button"
check "diagram2_layer0_spOpts_spOpt_2"
wait_for_image_loaded(2)
# CHANGE PROJECTION
select "diagram0_layer0_dgo_projection", "value=2" # LOG IN Y
wait_for_image_loaded(2)

# REMOVE DIAGRAM 1
click 'diagram1_del_button'
assert_element_not_present 'diagram1'

# CHANGE PARAMETERS OF DIAGRAM 0 AGAIN
select "diagram0_layer0_dm_dims_new_axis0", "lat"
select "diagram0_layer0_dm_dims_new_axis1", "lon"
select "diagram0_layer0_dgo_colormap", "value=2"
wait_for_image_loaded(0)
# RELOAD PAGE
open '/analysis2'
wait_for_page_to_load 30000
assert_element_present 'diagram2' # NUM OF DIAGRAMS SHOULD BE (4 - 1)
assert_element_not_present 'diagram3'
# ASSERT THAT THE DIAGRAM IS REPRODUCED WITH THE SAME COMBINATION OF PARAMETERS
# DIAGRAM IDS SHOULD CHANGE AS FOLLOWS:
# BEFORE RELOAD: [diagram3, diagram0, diagram2]
# AFTER RELOAD:  [diagram0, diagram1, diagram2]
wait_for_image_loaded(1)
assert_selected_label "diagram1_layer0_dm_dims_new_axis0", "lat"
assert_selected_label "diagram1_layer0_dm_dims_new_axis1", "lon"
assert_selected_value "diagram1_layer0_dgo_colormap", "2"
wait_for_image_loaded(2)
assert_selected_label "diagram2_layer0_dm", "line"

# CLEAR ALL
click "clear_all"
assert_element_not_present 'diagram0'
assert_element_not_present 'left_variables_name_0'
assert_element_not_present 'left_axes_0'

# RELOAD AND CHECK AGAIN IF SESSION IS REALLY CLEARED
open '/analysis2'
wait_for_page_to_load 30000
assert_element_not_present 'diagram0'
assert_element_not_present 'left_variables_name_0'
assert_element_not_present 'left_axes_0'

# More information about the commands is available at:
#   http://release.openqa.org/selenium-core/nightly/reference.html
# See also the RDoc for SeleniumOnRails::TestBuilder.
#
# Point the browser to http://localhost:3000/selenium/tests/analysis2.rsel to see
# how this test is rendered, or to http://localhost:3000/selenium to
# run the suite.
