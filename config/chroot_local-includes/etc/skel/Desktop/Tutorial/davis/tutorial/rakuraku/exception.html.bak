<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="ja">
<head>
<title>Exception</title>
<link rel="stylesheet" href="rubydcl.css" type="text/css">
</head>

<body>
<h1><a name="title" id="title">例外(エラー)処理</a></h1>
<p>
2003年3月　堀之内 武<br/>
2004年3月　西澤 誠也
</p>
<hr>

<h2><a name="exception" id="exception">例外</a></h2>
<p>
期待しない状況がが生じると例外が上がるります。
例外が発生すると通常はプログラムは終了し、メッセージが出力されます。
<br/><a href="./exception1.rb">exception1.rb</a><br/>
<textarea cols="80" rows="6" class="source">
require "narray"
def p_4(x)
  p x[4]
end
x = NArray[0,1,2,3]
p_4(x)
</textarea><br/>
<table width="80%"><tr><td><pre class="source">
%ruby exception1.rb
exception1.rb:3:in `[]': index out of range (IndexError)
        from exception1.rb:3:in `p_4'
        from exception1.rb:6
</pre></td></tr></table>
上のように、デフォルトでは実行が中断され、トレースバックが表示されます。
呼出しをさかのぼってファイル名と行番号が表示されます。
</p>

<p>
自分で例外が上がるようにもできます。
<br/><a href="./exception2.rb">exception2.rb</a><br/>
<textarea cols="80" rows="9" class="source">
def power(x,y)
 if Numeric===x
   return x**y
 else
   raise "x must be a kind of Numeric"
 end
end
p power(4,2)
p power("A",2)
</textarea><br/>
<table width="80%"><tr><td><pre class="source">
%ruby exception2.rb
16
exception2.rb:5:in `power': x must be a kind of Numeric (RuntimeError)
        from exception2.rb:9
</pre></td></tr></table>
<code>Numeric===x</code>は
<code>x</code>が数値オブジェクトであるかどうかを調べます。<br/>
raise は例外を発生するグローバルメソッドです。
数値以外の場合は例外が上がるようになっています。
</p>

<p>
ある程度エラーが予測されている場合は、
エラー時終了せず、適切な対処したいということがあるでしょう。
以下のように、
begin .. rescue .. [else] .. end、
を使うと例外を捕捉し、rescue以下の部分を実行します。
<br/><a href="./exception3.rb">exception3.rb</a><br/>
<textarea cols="80" rows="10" class="source">
def plus10(num)
   raise "Not a Numeric" if ! num.is_a?(Numeric)
   num + 10
end
def plus_str10(num)
   num + "10"
end

s = "20"
begin
   p plus10(s)
rescue
   p plus_str10(s)
end
</textarea><br/>
<table width="80%"><tr><td><pre class="source">
%ruby exception3.rb
"2010"
</pre></td></tr></table>
</p>

<p>
例外を捕捉したときだけその下を実行する rescue に加えて、例外が発生しようがし
まいが必ず実行する ensure というのもあります。これも begin .. ensure
.. end の形で使います。
<br/><a href="./exception4.rb">exception4.rb</a><br/>
<textarea cols="80" rows="10" class="source">
a = Array.new(2)
begin
 file = File.open("hello.txt")
 a[0] = file.readline
 a[1] = file.readline
rescue
 a[1] = "file is end"
ensure
 file.close if file
end
p a
</textarea><br/>
<table width="80%"><tr><td><pre class="source">
%cat hello.txt
Hello World!
%ruby exception4.rb
["Hello World!\n", "file is end"]
</pre></td></tr></table>
</p>

<p>
例外処理をうまく使うことで、
まさに「例外的な状況」に強いプログラムを作ることが出来ます。
汎用なプログラムをつくるためには、必須の機能です。
なお、軽微な例外的状況への対応のしかたとしては、
メソッドの戻り値を本来戻すべきクラスのオブジェクトでなく nil 
を返すという方法も良く使われます。例えば
<table width="80%"><tr><td><pre class="source">
irb(main):001:0> a = [10,20]
=> [10, 20]
irb(main):002:0> a[1]
=> 20
irb(main):003:0> a[2]
=> nil
</pre></td></tr></table>

</p>
<hr>
<a href="./rakuraku.html">return</a>
</body>
</html>