<?xml version="1.0" encoding="euc-jp" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<title>RDoc による自動ドキュメント生成</title>
<meta http-equiv="Content-type" content="text/html; charset=euc-jp" />
<link href="rdoc-tutorial.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h1><a name="label-0" id="label-0">RDoc による自動ドキュメント生成</a></h1><!-- RDLabel: "RDoc による自動ドキュメント生成" -->
<hr></hr>
<ol class="rd2html_hindex">

<ul>
<li><a href="#label-1">RDoc とは?</a></li>
<li><a href="#label-2">概要</a></li>
<li><a href="#label-3">インストール</a></li>
<li><a href="#label-7">サンプル Ruby スクリプト作成</a></li>
<li><a href="#label-8">RDoc によるドキュメント生成</a></li>
<li><a href="#label-14">RDoc の便利な機能を使ってみる</a></li>
<li><a href="#label-22">RDoc ドキュメントのサンプル</a></li>
<li><a href="#label-23">参考資料</a></li>
</ul>
</ol>
<hr></hr>

<h2><a name="label-1" id="label-1">RDoc とは?</a></h2><!-- RDLabel: "RDoc とは?" -->
<p>Ruby Documentation System (RDoc) とは, Ruby で書かれたソースコードから
ドキュメントを自動生成する, Ruby 本体に付属する標準ライブラリの1つです.</p>
<p>RDoc は Ruby ソースコードを解析し, クラス, モジュール, メソッドの定義
を抜き出し, include や require に関して解釈します. そしてこれらの内容
とその直前に書かれたコメントを併合し, HTML ドキュメントを出力しま
す. 詳しくは<a href="#label-23">参考資料</a> 1,2 を参照ください.</p>
<h2><a name="label-2" id="label-2">概要</a></h2><!-- RDLabel: "概要" -->
<p>以下では, まず RDoc のインストールを行います. そして Ruby で簡単なクラ
スライブラリを作成し, RDoc を用いてそのプログラムからドキュメントを生
成してみます.</p>
<p>前提として, Ruby 本体のインストールは行っておいてください.</p>
<h2><a name="label-3" id="label-3">インストール</a></h2><!-- RDLabel: "インストール" -->
<dl>
<dt><a name="label-4" id="label-4">Ruby をソースコードからインストールした場合</a></dt><!-- RDLabel: "Ruby をソースコードからインストールした場合" -->
<dd>
RDoc は, Ruby のバージョン 1.8.4 では既に標準ライブラリとして Ruby
本体に同梱されているはずです. Ruby のホームページ
( <a href="#label-23">参考資料</a> 3 ) からソースコードを
ダウンロードしてコンパイルした場合には RDoc も既にインストールされて
います.
</dd>
<dt><a name="label-5" id="label-5">バイナリパッケージを利用する場合</a></dt><!-- RDLabel: "バイナリパッケージを利用する場合" -->
<dd>
例えば Fedora, Vine, Debian などでは, ruby というパッケージとは別に
rdoc というパッケージが用意されているので別途インストールを行う必要
があります. (その他の場合は未調査です. すいません).
<ul>
<li><p>Fedora Core の場合</p>
<pre># yum install rdoc</pre></li>
<li><p>Vine, Debian の場合</p>
<pre># apt-get install rdoc</pre></li>
</ul>
</dd>
</dl>
<h3><a name="label-6" id="label-6">インストールの確認</a></h3><!-- RDLabel: "インストールの確認" -->
<p>空のディレクトリを作成し, そのディレクトリ内に移動してください.  その
ディレクトリ内で, <em>rdoc</em> というコマンドが実行できることを確認して
ください.</p>
<pre>$ mkdir rdoc_test
$ cd rdoc_test
$ rdoc</pre>
<p>以下のようなメッセージが表示され, doc というディレクトリが作成
されていれば OK です.</p>
<pre>Generating HTML...

Files:   0
Classes: 0
Modules: 0
Methods: 0
Elapsed: 0.262s</pre>
<h2><a name="label-7" id="label-7">サンプル Ruby スクリプト作成</a></h2><!-- RDLabel: "サンプル Ruby スクリプト作成" -->
<p>まず, GPhys を用いて簡単なクラスライブラリを作成しましょう. (これより
も前のチュートリアルで既に GPhys は利用可能な状態だと仮定しています).
以下のプログラムを作成してください.  <a href="sample/gphys_cont1.rb">&lt;URL:sample/gphys_cont1.rb&gt;</a></p>
<pre>class GPhys_cont
  require "numru/ggraph" ; include NumRu

  FILENAME = 'T.jan.nc'

  attr_reader   :var

  def initialize(var='T')
    @var  = var
  end
  def cont
    gphys = GPhys::IO.open(FILENAME, @var)
    DCL.gropn(1) ; DCL.sgpset('lcntl', false) ; DCL.uzfact(0.7)
    GGraph.contour( gphys)
    DCL.grcls
  end
end

if __FILE__ == $0
  gphys = GPhys_cont.new
  gphys.cont
end</pre>
<p><code>if __FILE__ == $0 </code> 以降の部分は, このプログラムを実行した際の
メイン文に当たります. このプログラムは実際には
<a href="http://ruby.gfd-dennou.org/products/gphys/tutorial/body-j.html#h2:toriaezu">GPhys チュートリアル -- 6. とりあえず可視化</a>
のように動作します. 以下のデータファイルをダウンロードした後, 上記の
Ruby スクリプトを ruby で実行してみてください.</p>
<ul>
<li><p><a href="http://ruby.gfd-dennou.org/products/gphys/tutorial/T.jan.nc">ダウンロード: NetCDFファイル T.jan.nc</a></p>
<pre>$ ruby gphys_cont1.rb</pre></li>
</ul>
<p>もう1つ, このクラスを継承したクラスライブラリを作成してみましょう.
以下のプログラムを作成してください.
<a href="sample/gphys_tone1.rb">&lt;URL:sample/gphys_tone1.rb&gt;</a></p>
<pre>require "gphys_cont1"
class GPhys_tone &lt; GPhys_cont

  attr_accessor :draw_tone

  def initialize
    super
    @draw_tone = true
  end
  def tone(itr=1)
    gphys = GPhys::IO.open(FILENAME, @var)
    DCL.gropn(1) ; DCL.sgpset('lcntl', false) ; DCL.uzfact(0.7)
    GGraph.set_fig( 'itr'=&gt;(itr == nil) ? 1 : itr.to_i)
    GGraph.tone( gphys ) if @draw_tone
    GGraph.contour( gphys, !@draw_tone )
    DCL.grcls
    return true
  end
end

if __FILE__ == $0
  gphys = GPhys_tone.new
  gphys.tone
end</pre>
<p>このプログラムは, gphys_cont1.rb の色塗り版です.</p>
<pre>$ ruby gphys_tone1.rb</pre>
<h2><a name="label-8" id="label-8">RDoc によるドキュメント生成</a></h2><!-- RDLabel: "RDoc によるドキュメント生成" -->
<h3><a name="label-9" id="label-9">まず rdoc を使ってみる</a></h3><!-- RDLabel: "まず rdoc を使ってみる" -->
<p>では次に, RDoc を用いてこのクラスライブラリのリファレンスマニュアルを
自動生成してみましょう. gphys_cont1.rb, gphys_tone1.rb が置いてあるディ
レクトリで以下のコマンドを実行してください.</p>
<pre>$ rdoc gphys_cont1.rb gphys_tone1.rb --main GPhys_cont</pre>
<dl>
<dt><a name="label-10" id="label-10">引数 "gphys_cont1.rb gphys_tone1.rb"</a></dt><!-- RDLabel: "引数 "gphys_cont1.rb gphys_tone1.rb"" -->
<dd>
対象となるファイルです. ここでは明記していますが, ファイルを明記しな
い場合はカレントディレクトリ以下に存在する全ての "rb" という拡張子を
持つファイルを検索します.
</dd>
<dt><a name="label-11" id="label-11">引数 "--main GPhys_cont"</a></dt><!-- RDLabel: "引数 "&shy;&shy;main GPhys_cont"" -->
<dd>
メインページを指定します. ここではクラス GPhys_cont をメインページに
指定します.
</dd>
</dl>
<p>このコマンドにより, doc というディレクトリが作成され, その中に RDoc に
よって作成されたドキュメントが出力されたはずです. ブラウザで
doc/index.html を見てみましょう. 以下のようなページが表示されるはずです.</p>
<ul>
<li><a href="sample/doc1">GPhys_cont (コメント無し)</a></li>
</ul>
<p><img src="rdoc-image1.png" alt="RDoc により作成されたドキュメント (コメント無し)" /></p>
<p>上段の 3 分割されたフレームにファイル, クラスおよびモジュール, メソッ
ドのリストが表示されています. 下の部分には GPhys_cont クラスの内容が
表示されています. 下のフレームのメソッド名の部分をクリックすると, ソー
スコードが表示されます.</p>
<h3><a name="label-12" id="label-12">コメントを書き込んでみる</a></h3><!-- RDLabel: "コメントを書き込んでみる" -->
<p>ソースコードにコメントを埋め込むことで, ドキュメントにより多くの
情報を付加してみましょう. gphys_cont1.rb にコメントを追加した
以下のファイルを作成しましょう.</p>
<p><a href="sample/gphys_cont2.rb">&lt;URL:sample/gphys_cont2.rb&gt;</a></p>
<pre>#
# GPhys を利用して等値線図を描画するクラスライブラリ
#
class GPhys_cont
  require "numru/ggraph" ; include NumRu

  # ファイル名 (固定)
  FILENAME = 'T.jan.nc'

  # 描画する変数
  attr_reader   :var

  #
  # 初期化処理用のメソッド. 引数 _var_ には描画する変数を
  # 与えます.
  #
  def initialize(var='T')
    @var  = var
  end

  #
  # ※ 空行を入れると, それより上の部分は無視されます.
  #

  #
  # 等値線図の描画を実行します.
  #
  def cont
    gphys = GPhys::IO.open(FILENAME, @var)
    DCL.gropn(1) ; DCL.sgpset('lcntl', false) ; DCL.uzfact(0.7)
    GGraph.contour( gphys)
    DCL.grcls
  end
end

if __FILE__ == $0
  gphys = GPhys_cont.new
  gphys.cont
end</pre>
<p>クラスやメソッド定義の直前に書かれているコメントが各々のドキュメントと
して解釈されます. なお, 空行をいれた段階でそれよりも上部の部分 (上のソー
スコードで言うと「※ 空行を入れると...」の部分) はドキュメントとして解釈
されません.</p>
<p>では, 再度 rdoc コマンドを実行してみましょう.</p>
<pre>$ rdoc gphys_cont2.rb gphys_tone1.rb --main GPhys_cont --charset euc-jp</pre>
<dl>
<dt><a name="label-13" id="label-13">引数 "--charset euc-jp"</a></dt><!-- RDLabel: "引数 "&shy;&shy;charset euc-jp"" -->
<dd>
ソースコード内にマルチバイトの文字 (日本語など) が含まれる場合は必ず
このオプションを指定してください. ソースコード内のマルチバイト文字の
文字コードに合わせ, "euc-jp", "shift_jis", "iso-2022-jp" のいづれか
を指定します.
</dd>
</dl>
<p>今度は, 以下のようなページが生成されます.</p>
<ul>
<li><a href="sample/doc2">GPhys_cont (コメントあり)</a></li>
</ul>
<p><img src="rdoc-image2.png" alt="RDoc により作成されたドキュメント (コメントあり)" /></p>
<p>ソースコード内のクラスやメソッドの上部に書かれたコメントがドキュメントに
反映されているのが分かります.</p>
<h2><a name="label-14" id="label-14">RDoc の便利な機能を使ってみる</a></h2><!-- RDLabel: "RDoc の便利な機能を使ってみる" -->
<h3><a name="label-15" id="label-15">コメント部の修飾</a></h3><!-- RDLabel: "コメント部の修飾" -->
<p>RDoc のコメント部はかなり自然に書くことができますが,
いろいろな修飾も可能になっています.</p>
<p>gphys_tone1.rb にコメントを追加した以下のファイルを作成しましょう.</p>
<p><a href="sample/gphys_tone2.rb">&lt;URL:sample/gphys_tone2.rb&gt;</a></p>
<pre>require "gphys_cont2"
#
#= GPhys を利用して色塗り図を描画するクラスライブラリ
#
#Authors::   森川 靖大
#Version::   1.2 2006-03-08 morikawa
#Copyright:: Copyright (C) GFD Dennou Club, 2006. All rights reserved.
#License::   Ruby ライセンスに準拠
#
#-- (#-- から #++ までの部分を RDoc は解釈しません.)
#"=", "==", ""===" は見出しを表します.
#
#= 見出しレベル1
#== 見出しレベル2
#=== 見出しレベル3
#++
#
#このクラスのスーパークラスは GPhys_cont です.
#new メソッドで初期化を行い, tone メソッドで描画を行います.
#
#--
# モジュール名やメソッド名はそのままモジュールやメソッドへのリンクに
# 変換されます.
#++
#
#=== 参考資料
#
#* http://ruby.gfd-dennou.org
#  1. GPhys[http://www.gfd-dennou.org/library/ruby/products/gphys/]
#  2. {2006 年 電脳rubyセミナー・電脳davis/rubyワークショップ}[http://www.gfd-dennou.org/library/ruby/workshop200603/]
#
#--
#==リストの表示に関して
#
#リストは以下のような記号が付いたパラグラフです.
#
# - '*' もしくは '-' で普通のリスト
# - 数字+ピリオドで番号付きリスト
# - アルファベット+ピリオドでアルファベットリスト
#
#
#== リンクに関して
#
# http:, mailto:, ftp:, www. で始まるテキストはウェブへのリンクだと
# 判別されます.
#
# label[url] の形式でもハイパーリンクが張れます. この場合は lavel が表
# 示され, url がリンク先となります. label が複数の単語を含んでいる場合 
# (日本語の場合はこっちを使ってください), 中括弧を使い, &lt;em&gt;{multi word
# label}[&lt;/em&gt;url&lt;em&gt;]&lt;/em&gt;としてください.
#++
#
#=== 開発履歴
#
#* 1.2 2006-03-08
#  * 堀之内さんのコメントを下に, 作者やライセンス, 開発履歴の
#    欄を足してみる.
#
#* 1.1 2006-03-07
#  * とりあえず作成してみる.
#
class GPhys_tone &lt; GPhys_cont

  # 図に色塗りを行うかどうかのフラグ.
  # このフラグを false や nil にした場合, GPhys_cont#cont と
  # 同様に動作します.
  #
  attr_accessor :draw_tone

  #
  #=== 初期化処理用メソッド
  #
  #GPhys_cont#new を参照してください.
  #
  #--
  # 別のモジュール内のメソッドへリンクする場合は
  # "&lt;i&gt;モジュール名&lt;/i&gt;#&lt;i&gt;メソッド名&lt;/i&gt;" と指定します
  #++
  #
  def initialize
    super
    @draw_tone = true
  end

  #=== 描画メソッド
  #
  #色塗り図を描画するメソッド. 等値線図のみを描画したい場合は
  #GPhys_cont#cont を利用してください.
  #
  #_itr_ :: 描画する際の地図投影法を指定します. 数値を与えてください.
  #         デフォルトは 1 になっています. 番号と投影法の関係に関しては
  #         http://www.gfd-dennou.org/library/dcl/dcl-f90/doc/term/2d.htm
  #         を参照ください
  #
  #返り値:: 常に true が返ります.
  #
  def tone(itr=1)
    gphys = GPhys::IO.open(FILENAME, @var)
    DCL.gropn(1) ; DCL.sgpset('lcntl', false) ; DCL.uzfact(0.7)
    GGraph.set_fig( 'itr'=&gt;(itr == nil) ? 1 : itr.to_i)
    GGraph.tone( gphys ) if @draw_tone
    GGraph.contour( gphys, !@draw_tone )
    DCL.grcls
    return true
  end
end

if __FILE__ == $0
  gphys = GPhys_tone.new
  gphys.tone
end</pre>
<p>では, 再度 rdoc コマンドを実行してみましょう.</p>
<pre>$ rdoc gphys_cont2.rb gphys_tone2.rb --main GPhys_tone --charset euc-jp</pre>
<p>今度は, 以下のようなページが生成されます.</p>
<ul>
<li><a href="sample/doc3">GPhys_tone</a></li>
</ul>
<p><img src="rdoc-image3.png" alt="RDoc により作成されたドキュメント (いろいろ修飾)" /></p>
<p>モジュールやメソッドなどに自動的にリンクがはられ, 見出し, リスト表示
が行われていることがわかります.</p>
<p>修飾のための書式に関して, ソースコードに解説が付記してあるので参照して
ください. より詳しい情報は, <a href="#label-23">参考資料</a> 1, 2 の "MarkUp" の部分を参
照してください. ソースコード内で解説が書き込んである <code>'#--'</code> 〜 
<code>'#++'</code> の部分に関しては RDoc は無視するため, ドキュメントに反映さ
れません.</p>
<h3><a name="label-16" id="label-16">便利なオプション</a></h3><!-- RDLabel: "便利なオプション" -->
<p>rdoc コマンドのオプションのうち, 上記で説明しなかった便利なものをいく
つか紹介します. より詳しい情報は, <a href="#label-23">参考資料</a> 1, 2 の "Usage" また
は "使い方" の部分を参照してください.</p>
<dl>
<dt><a name="label-17" id="label-17">--all, -a</a></dt><!-- RDLabel: "&shy;&shy;all, -a" -->
<dd>
private 属性のメソッドもドキュメントに表示します.
開発者向けのドキュメントとして便利かもしれません.
</dd>
<dt><a name="label-18" id="label-18">--diagram, -d</a></dt><!-- RDLabel: "&shy;&shy;diagram, -d" -->
<dd>
クラスの継承関係などを画像化して表示します.
<a href="http://www.research.att.com/sw/tools/graphviz/">Dot</a>
が必要になります. (Fedora, Vine, Debian ならば graphviz
パッケージのインストールで利用可能になります).
</dd>
<dt><a name="label-19" id="label-19">--inline-source, -S</a></dt><!-- RDLabel: "&shy;&shy;inline-source, -S" -->
<dd>
ソースコードの表示をポップアップではなく, ページ内で
表示するようにします.
</dd>
<dt><a name="label-20" id="label-20">--op, -o dir</a></dt><!-- RDLabel: "&shy;&shy;op, -o dir" -->
<dd>
dir ディレクトリにドキュメントを出力します.
</dd>
<dt><a name="label-21" id="label-21">--title, -t text</a></dt><!-- RDLabel: "&shy;&shy;title, -t text" -->
<dd>
text を HTML のタイトルに設定します.
</dd>
</dl>
<p>以下のコマンドで作成したドキュメントを載せておきます.
(コマンドプロンプトや DOS 窓を利用している方がコピペしやすいように,
改行しないものも載せておきます)</p>
<pre>$ rdoc gphys_cont2.rb gphys_tone2.rb --main GPhys_tone \
      --charset euc-jp --inline-source --diagram \
      --title "GPhys_tone and GPhys_cont Documentation"

$ rdoc gphys_cont2.rb gphys_tone2.rb --main GPhys_tone --charset euc-jp --inline-source --diagram --title "GPhys_tone and GPhys_cont Documentation"</pre>
<ul>
<li><a href="sample/doc4">GPhys_tone and GPhys_cont Documentation</a></li>
</ul>
<h2><a name="label-22" id="label-22">RDoc ドキュメントのサンプル</a></h2><!-- RDLabel: "RDoc ドキュメントのサンプル" -->
<p>RDoc を用いて作成されたドキュメントをいくつか紹介します.</p>
<ul>
<li><a href="http://www.ruby-doc.org/stdlib/">Ruby Standard Library Documentation</a></li>
<li><a href="http://api.rubyonrails.org/">Ruby on Rails</a></li>
</ul>
<h2><a name="label-23" id="label-23">参考資料</a></h2><!-- RDLabel: "参考資料" -->
<ol>
<li><a href="http://www.ruby-doc.org/stdlib/libdoc/rdoc/rdoc/index.html">rdoc: Ruby Standard Library Documentation</a></li>
<li><a href="http://www.kmc.gr.jp/~ohai/rdoc.ja.html">大林一平さんによる上記ページの日本語訳</a></li>
<li><a href="http://www.ruby-lang.org/">オブジェクト指向スクリプト言語 Ruby の本家サイト</a></li>
</ol>

</body>
</html>
<hr> <small> Dennou Ruby Project / GFD Dennou Staff <img src="dcstaff_email.png" alt="dcstaff&#64;&#103;&#102;&#100;-dennou.org" align="middle"> <br> Last Updated: 2006/08/16, Since: 2006/03/05 </small>
