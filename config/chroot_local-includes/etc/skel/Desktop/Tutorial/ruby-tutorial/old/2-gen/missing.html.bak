<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Missing Value</title>
<link rel="stylesheet" type="text/css" href="./rubydcl.css">
</head>

<body>
<h1><a name="title" id="title">チュートリアル</a></h1>
<hr/>
<h2><a name="missing" id="missing">欠損値の扱い</a></h2>
<p>
ここでは欠損値を持ったデータを扱う際の便利な方法について見ていきたいと思います。
<ul>
 <li><a href="#narraymiss_class">NArraMissクラス</a></li>
 <li><a href="#dcl">DCLでお絵書き</a></li>
 <li><a href="#netcdf">NetCDFのデータの扱い</a></li>
 <li><a href="#experiment">演習問題</a></li>
</ul>
</p>

<h3><a name="narraymiss_class" id="narraymiss_class">NArrayMiss クラス</a></h3>
<p>
欠損値を持った NArray の配列を扱う場合
<br/><a href="./missing1.rb">missing1.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "narray"

ndim = 10
rmiss = -999.0

x = NArray.sfloat(ndim).indgen
x[3] = rmiss
y = NArray.sfloat(ndim).indgen(10)
y[5] = rmiss

z = NArray.sfloat(ndim)
for n in 0..ndim-1
  if x[n]!=rmiss && y[n]!=rmiss then
     z[n] = x[n]+y[n]
  else
     z[n] = rmiss
  end
end
p z
</textarea><br/>
もしくは
<br/><a href="./missing2.rb">missing2.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "narray"

ndim = 10
rmiss =-999.0

x = NArray.sfloat(ndim).indgen
x[3] = rmiss
y = NArray.sfloat(ndim).indgen(10)
y[5] = rmiss

z = NArray.sfloat(ndim).fill(rmiss)
mask = x.ne(rmiss)&y.ne(rmiss)
z[mask] = x[mask]+y[mask]
p z
</textarea><br/>
となります。
</p>

<p>
ruby ではすべてはオブジェクトであり配列自身に欠損値情報をもたせることが出来ます。<br/>
<a
href="http://www.gfd-dennou.org/arch/ruby/products/narray_miss/index-j.html">
NArrayMiss クラス</a>は NArray の配列とマスクをあわせ持ったものです。
NArrayMiss クラスを利用すると
<br/><a href="./missing3.rb">missing3.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "narray_miss"

ndim = 10

x = NArrayMiss.sfloat(ndim).indgen!
x.invalidation(3)
y = NArrayMiss.sfloat(ndim).indgen!(10)
y.invalidation(5)

z = x+y
p z
</textarea><br/>
のように、欠損のことを気にすること無く演算ができます。
</p>
<p>
四則演算以外にもいくつかのメソッドが用意されています。
<a href="http://www.gfd-dennou.org/arch/ruby/products/narray_miss/narray_miss.html">
ドキュメント</a>参照のこと
<table width="80%"><tr><td><pre class="source">
NArrayMiss#%
NArrayMiss#**
NArrayMiss#sum
NArrayMiss#accum
NArrayMiss#min
NArrayMiss#max
NArrayMiss#mean
NArrayMiss#stddev
</pre></td></tr></table>
<a href="./missing4.rb">missing4.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "narray_miss"

ndim = 10

x = NArrayMiss.sfloat(ndim).indgen!
x.invalidation(3)

for method in ["sum","min","max","mean","stddev"]
  str = "print \"#{method} = \",x.#{method},\"\n\""  # print "sum = ",x.sum,"\n"
  eval(str)
end
</textarea><br/>

<h3><a name="dcl" id="dcl">DCLでお絵書き</a></h3>
<p>
DCLでお絵書きする際に欠損値処理を有効にするためには
<table width="80%"><tr><td><pre class="source">
require "numru/dcl"
include NumRu
rmiss = -9.99e10   # example
DCL::gllset("lmiss",true)
DCL::glrset("rmiss",rmiss)
</pre></td></tr></table>
とします。
</p>
<p>
また現時点では Ruby-DCL は NArrayMiss クラスを扱うことが出来ないため
NArray に変換する必要があります。
<table width="80%"><tr><td><pre class="source">
NArrayMiss#to_na([missing_value])
</pre></td></tr></table>
簡単な例をあげます。
<br/><a href="./missing5.rb">missing5.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "numru/dcl"
require "narray_miss"

include NumRu
include NMMath

rmiss = -9.99e10

nt = 50
nz = 50
tmin, tmax = 0.0, 5.0
zmin, zmax = 20.0,50.0
t = NArrayMiss.sfloat(nt+1,   1).indgen! * (tmax-tmin)/nt
z = NArrayMiss.sfloat(   1,nz+1).indgen! * (zmax-zmin)/nz
t.invalidation(10)
z.invalidation(5)
uz = exp(-0.2*z)*(z**0.5)
tz = -2.0*exp(-0.1*z)
u = uz*sin(3.0*(tz+t))

DCL::gropn(1)
DCL::gllset("lmiss",true)
DCL::glrset("rmiss",rmiss)
DCL::grfrm
DCL::grswnd(tmin, tmax, zmin, zmax)
DCL::uspfit
DCL::grstrf
DCL::usdaxs
DCL::udcntr(u.to_na(rmiss))
DCL::grcls
</textarea><br/>
<table width="80%"><tr><td class="results">
<img src="./missing5.png" width="456"/>
</td></tr></table>
</p>


<h3><a name="netcdf" id="netcdf">NetCDFのデータの扱い</a></h3>
<p>
NetCDFのデータを扱う場合は、
まず NArray として読み出した後に NArrayMiss に変換します。
<table width="80%"><tr><td><pre class="source">
NArrayMiss#to_nam(ary [,mask])
</pre></td></tr></table>
計算機の浮動小数の扱いの誤差を考慮して、
マスクは
<table width="80%"><tr><td><pre class="source">
mask = x.eq(rmiss)
</pre></td></tr></table>
ではなく
<table width="80%"><tr><td><pre class="source">
mask = x.gt(rmiss/2)        # when rmiss<0
mask = x.le(rmiss*0.8)      # when rmiss>0
</pre></td></tr></table>
などとした方が良いでしょう。
</p>
<p>
1999年1月の1日4回31日分の200hPaでのUのデータ<a href="./u.199901.nc">u.199901.nc</a>
を読み込んで、
その時間平均を描く例を示します。<br/>
<br/><a href="./missing6.rb">missing6.rb</a><br/>
<textarea cols="80" rows="10" class="source">
require "numru/netcdf"
require "numru/dcl"
require "narray_miss"
include NumRu

file = NetCDF.open("./u.199901.nc")
ntime = file.dim("time").length
lon = file.var("lon").get
lat = file.var("lat").get
u = file.var("dat").get
rmiss = file.var("dat").att("missing_value").get[0]
file.close

if rmiss<0 then
  mask = u.gt(rmiss/2)
else
  mask = u.lt(rmiss/2)
end
u = NArrayMiss.to_nam(u,mask)
mean = u.mean(2)

DCL::gropn(1)
DCL::gllset("lmiss",true)
DCL::glrset("rmiss",rmiss)

DCL::grfrm
DCL::grstrn(10)
DCL::grswnd(0.0,360.0,-90.0,90.0)
DCL::umpfit
DCL::grstrf
DCL::uwsgxa(lon)
DCL::uwsgya(lat)
DCL::uelset("ltone",true)
DCL::uetone(mean.to_na(rmiss))
DCL::umpmap("coast_world")
DCL::umplim

DCL::grcls
</textarea><br/>
<table width="80%"><tr><td class="results">
<img src="./missing6.png" width="456"/>
</td></tr></table>
</p>


<h3><a name="experiment" id="experiment">演習問題</a></h3>
<p>
<ol>
 <li>上の1999年1月Uの時間方向の標準偏差を求め、図を描きましょう</li>
 <li>1と同じで時間方向に6割以上データが無いと欠損にしましょう</li>
</ol>
</p>


<hr/>
<a href="./index.html">return</a>

</body>
</html>