<?xml version="1.0" encoding="shift_jis" ?>
<!DOCTYPE html 
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
<meta http-equiv="Content-type" content="text/html; charset=shift_jis" />
<title>jump_gphys.rd.rdhindex.tmp</title>
<link href="style.css" type="text/css" rel="stylesheet" />
</head>
<body>

<small>[ <a href="http://ruby.gfd-dennou.org/">GFD Dennou Ruby Home</a> | <a href="http://ruby.gfd-dennou.org/products/gphys/">GPhys Home</a> | <a href="./">Tutorial top</a> ]</small>
<p><em>このドキュメントは作成中です. 学習には
<a href="http://ruby.gfd-dennou.org/products/gphys/tutorial/">現行のチュートリアル</a>
を参照ください.</em></p>
<h2><a name="label-0" id="label-0">GPhys を使ってちょっと応用</a></h2><!-- RDLabel: "GPhys を使ってちょっと応用" -->
<p>GPhys ライブラリを本格的に使ってみましょう.</p>
<h3><a name="label-1" id="label-1">GPhys オブジェクトの操作</a></h3><!-- RDLabel: "GPhys オブジェクトの操作" -->
<p>再度 T.nc を読み込みます.</p>
<pre>gp = gpopen('T.nc/T')</pre>
<p>これまでは全世界を描いていましたが, 日本付近を切り出してみましょう.
どの場所を見ているか分かりやすいよう、海岸線を描くようにしておきます.</p>
<pre>set_fig('itr' =&gt; 10 )  # 正距円筒図法
set_map('coast_world'=&gt;true)   # 地球の海岸線を表示</pre>
<p>切り出すためには, 切り出す軸を指定する必要があります.
gp の中に格納されている軸を見てみましょう.</p>
<pre>gp</pre>
<p>"axis pos=" の後ろにあるのが軸の名前です.</p>
<p>lat, lon がそれぞれ緯度経度と推測されますので, 
それで切ってみましょう.</p>
<pre>tone(gp.cut('lat'=&gt;20..50, 'lon'=&gt;120..150))  # 緯度 20-50 度, 経度 120-150 度の範囲を切り出して描画</pre>
<p>このとき, 指定した緯度経度にデータが存在しなくても, 
GPhys 側で近い値を探して取ってきてくれます.</p>
<p>ちなみにこれは, </p>
<pre>gp_jpn = gp.cut('lat'=&gt;20..50, 'lon'=&gt;120..150)
tone(gp_jpn)</pre>
<p>と分けて書くこともできます.
たとえば日本付近の図を何枚も描きたいときなどに入力を減らせるので楽です.</p>
<p>cut に値をひとつだけ入れるとその面での切り出しになります.
ためしに日本上空の鉛直プロファイルを見てみましょう.</p>
<pre>line(gp.cut('lon'=&gt;135,'lat'=&gt;35), true, 'exchange'=&gt;true)  # 縦軸を鉛直座標にするために exchange を設定しています.</pre>
<p>平均するためのメソッド mean もあります.
試しに帯状平均 (東西方向に平均) した温度分布を見てみましょう.</p>
<pre>set_fig('itr'=&gt;1)   # 座標系を元に戻しておく.
tone(gp.mean('lon'))</pre>
<h4><a name="label-2" id="label-2">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>500 hPa 断面の温度分布を描いてみましょう.</li>
</ol>
<h3><a name="label-3" id="label-3">GPhys オブジェクトの操作 その 2</a></h3><!-- RDLabel: "GPhys オブジェクトの操作 その 2" -->
<p>軸情報が共通する GPhys オブジェクト同士では
NArray の要領で計算ができます.</p>
<pre>eddy = gp - gp.mean('lon')  # 帯状平均からの偏差
tone(eddy)
color_bar</pre>
<p>描画以外にも活用してみましょう.
日本付近の 1000 hPa の温度を調べてみましょう.</p>
<pre>gp2 = gp.cut('lon'=&gt;135,'lat'=&gt;35,'level'=&gt;1000))</pre>
<p>GPhys オブジェクトには軸や単位の情報が入っています.
値だけを取り出したい場合は
以下のようにすると NArray 形式のデータが得られます.</p>
<pre>gp2.val</pre>
<p>ちなみに軸の座標の値を取り出すにはこのようにします.</p>
<pre>gp.axis('level').pos.val</pre>
<h4><a name="label-4" id="label-4">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>1000 hPa, 緯度 30 度における帯状平均温度を求めてみましょう.</li>
<li>(やや難) 70 hPa, 経度 135 度断面で, 一番気温が低い緯度はどこでしょうか.</li>
</ol>
<h3><a name="label-5" id="label-5">テキスト入出力</a></h3><!-- RDLabel: "テキスト入出力" -->
<p>データをテキストで出力してみます.
準備として以下の内容を入力しておきます.</p>
<pre>na_jpn = gp2.val
level = gp.axis('level').pos.val</pre>
<p>後の都合のために, データを詰め替えておきます.</p>
<pre>n = na_jpn.size   # 配列のサイズを得る
nary = NArray.sfloat(n,2)    # sfloat は単精度実数
nary[true,0] = level         # true はその次元の全要素を意味する
nary[true,1] = na_jpn.to_a   # NArrayMiss クラスなのでそのまま代入できない. サンプルの問題?</pre>
<p>テキストデータとして書き出してみましょう.</p>
<pre>file = File.open("test.dat", 'w')   # test.dat という名のファイルを書き込み用に開く
(0..n-1).each{|i| 
  file.puts nary[true, i].to_a.join(" ")  # 半角スペースを挟んで連結し, 文字列として出力
}
file.close    # ファイルを閉じる</pre>
<p>端末で中を見てみる</p>
<pre>$ cat test.dat</pre>
<p>今度は, 今さっき出力したファイルを読み込んでみましょう.</p>
<pre>file2 = File.open("test.dat", 'r')   # 読み込み用で開く
str = file2.read     # ファイルの内容全てを文字列として str に代入
file2.close</pre>
<p>これだと str はまだ連結された文字列なので, 
扱いやすいように配列にし, NArray に変換します.</p>
<pre>ary = str.split("\n").each{|a| a = a.split(" ") }
nary = NArray.to_na(ary)</pre>
<p>split は, ドットの前の文字列を引数の文字列で分割し, 配列に変換するメソッドです.</p>
<h3><a name="label-6" id="label-6">GPhys オブジェクトの作成</a></h3><!-- RDLabel: "GPhys オブジェクトの作成" -->
<p>自分で GPhys オブジェクトを作ってみましょう.
さっき読み込んだデータを利用します.</p>
<pre>level = nary[true,0]
temp  = nary[true,1]</pre>
<p>ついでにデータの中身を変更してみます.
今の温度データの単位は摂氏なので絶対温度にしてみます.</p>
<pre>temp = temp + 273.15</pre>
<p>GPhys オブジェクトを作ります
(長いのでコピーペースト推奨).</p>
<pre># 軸情報
va_level = VArray.new( level,
                    {"long_name"=&gt;"Level", "units"=&gt;"hPa"},
                    "level" )
axis_level = Axis.new.set_pos(va_level)

# 温度
data = VArray.new( temp,
                   {"long_name"=&gt;"temperature", "units"=&gt;"K"},  # 単位が K であることに注意
                   "T" )

# GPhys オブジェクトの作成
gp3 = GPhys.new( Grid.new(axis_level), data )</pre>
<p>描画してみましょう.</p>
<pre>line(gp3, true, 'exchange'=&gt;true)</pre>
<p>温度の軸の数値や単位がさっきと変わっています.</p>
<h4><a name="label-7" id="label-7">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>温度データの "long_name"=&gt;"temperature" の "temperature" を好きな文字列に変えて
    GPhys オブジェクトを作成して, 図のタイトルや軸の名前が変わることを確認してみましょう.</li>
</ol>
<h3><a name="label-8" id="label-8">netCDF ファイルの入出力</a></h3><!-- RDLabel: "netCDF ファイルの入出力" -->
<p>GPhys オブジェクトを netCDF ファイルに書きだしてみます.</p>
<pre>outfile = NetCDF.create("test.nc")
GPhys::IO.write(outfile, gp3)  # netCDF ファイルに書き出す
outfile.close</pre>
<p>ところで, これまでは</p>
<pre>gp = gpopen('T.nc/T')</pre>
<p>という具合に T.nc の中に変数 T があることを知っていて
netCDF ファイルを読み込んでいましたが, 
他の人が配布しているファイルはこうなっているとは限りません.
ファイルの中にどのような変数があるか調べてみましょう.</p>
<pre>GPhys::IO.var_names('T.nc')</pre>
<h4><a name="label-9" id="label-9">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>test.nc を読み込んで, 自由に描画してみましょう.</li>
</ol>
<h3><a name="label-10" id="label-10">スクリプトファイルで行うには</a></h3><!-- RDLabel: "スクリプトファイルで行うには" -->
<p>irb は試行錯誤に向いていますが, 
決まった図を大量に生成したり, 複雑な操作をするのには向いていません.
その場合はスクリプトファイルにしておくと
あとで使い回せるので便利です.</p>
<p>書く命令は irb のときと同じです.
単純な例を示します.</p>
<pre>#!/usr/bin/env ruby
require "irb_ggraph"     # おまじない. カレントディレクトリに irb_ggraph.rb がないとエラーになるので注意
gp = gpopen('T.nc/T')
tone(gp)
DCL.grcls   # スクリプトファイルにするときは必須</pre>
<p>たとえばこれを test.rb として保存します.
実行はこのようにします.</p>
<pre>$ ruby test.rb</pre>
<p>ファイルに実行権限をつければ, より短いコマンドになります.</p>
<pre>$ chmod u+x test.rb
$ ./test.rb</pre>
<h4><a name="label-11" id="label-11">演習問題</a></h4><!-- RDLabel: "演習問題" -->
<ol>
<li>test.rb の中身を好きに書き換え, 実行してみましょう.</li>
<li>test.rb の出力先を netCDF ファイルにしてみましょう.</li>
<li>test.rb で使うデータをテキストファイルからの入力にしたり, 
    ファイルを読み込まずに手元で生成したデータにしてみましょう.
    (ヒント: 最初に NArray で軸とデータを作る,
    それを GPhys オブジェクトに変換する)</li>
</ol>
<h2><a name="label-12" id="label-12">参考文献</a></h2><!-- RDLabel: "参考文献" -->
<ul>
<li><a href="http://davis.gfd-dennou.org/rubygadgets/ja/?%28Others%29+GPhys%2FGGraph+%A5%C1%A1%BC%A5%C8%A5%B7%A1%BC%A5%C8">GPhys/GGraph チートシート</a></li>
<li>GPhys リファレンスマニュアル
  (
  <a href="http://ruby.gfd-dennou.org/products/gphys/doc/">英語</a>,
  <a href="http://w.livedoor.jp/gphys/">日本語訳</a>
  )</li>
</ul>
<h2><a name="label-13" id="label-13">付録: 実際の使用例</a></h2><!-- RDLabel: "付録: 実際の使用例" -->
<h3><a name="label-14" id="label-14">サンプル</a></h3><!-- RDLabel: "サンプル" -->
<ul>
<li><a href="http://ruby.gfd-dennou.org/products/ruby-dcl/demo/">RubyDCL demo programs</a></li>
</ul>
<h3><a name="label-15" id="label-15">実際の研究に使われている例</a></h3><!-- RDLabel: "実際の研究に使われている例" -->
<ul>
<li>大気大循環モデルの例: <a href="http://www.gfd-dennou.org/library/dcpam/sample/">dcpam5 を用いた計算の結果</a></li>
<li>非静力学モデル: <a href="http://www.gfd-dennou.org/library/deepconv/arare/sample/">プログラムのテスト計算 [deepconv/arare5]</a></li>
<li>(モデルだけでなく観測結果などの図集も欲しい)</li>
</ul>

<hr /> <small> davis Group / GFD Dennou Staff <img src="/library/dcmodel/htmltools/dcstaff_email.png" alt="dcstaff&#64;&#103;&#102;&#100;-dennou.org" align="middle" /> <br /> 

</body>
</html>
